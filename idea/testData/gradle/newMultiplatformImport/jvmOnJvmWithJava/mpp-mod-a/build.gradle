group 'org.jetbrains.qa'
version '1.0.0'

apply plugin: 'kotlin-multiplatform'
apply plugin: 'maven-publish'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-noarg'
apply plugin: 'com.moowork.node'

buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$moowork_node"
    }
    repositories {
        maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/qwwdfsad/kotlinx' }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        mavenLocal()
        jcenter()
    }
}

repositories {
    maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://dl.bintray.com/qwwdfsad/kotlinx' }
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
    mavenLocal()
    jcenter()
}

kotlin {
    jvm {
        withJava()
    }

    js() {
        def testRuntimeClasspath = compilations.test.runtimeDependencyFiles

        [tasks.getByName(compilations.main.compileKotlinTaskName), tasks.getByName(compilations.test.compileKotlinTaskName)]*.kotlinOptions {
            sourceMap = true // for debugging
            sourceMapEmbedSources = "always" // for debugging
            moduleKind = 'umd'
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common', kotlin_version)
                implementation kotlin('stdlib', kotlin_version)
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common', kotlin_version)
                implementation kotlin('test-annotations-common', kotlin_version)
            }
        }
        jvmMain {
            kotlin.srcDir('src/jvmMain/customSrc')

            dependencies {
                implementation kotlin('stdlib-jdk8', kotlin_version)
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test', kotlin_version)
                implementation kotlin('test-junit', kotlin_version)
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js', kotlin_version)
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js', kotlin_version)
            }
        }
    }
}

// ======================= JS test configurations =====================

task populateNodeModules(type: Sync, dependsOn: compileTestKotlinJs) {
    from compileKotlinJs.destinationDir
    into "${buildDir}/node_modules"

    afterEvaluate {
        configurations.jsTestRuntimeClasspath.each {
            if (it.absolutePath.endsWith(".jar")) {
                from zipTree(it.absolutePath).matching {
                    include '*.js'
                    include '*.js.map'
                }
            }
        }
    }

}
build.dependsOn(populateNodeModules)

// Workaround the problem with Node downloading
repositories.whenObjectAdded {
    if (it instanceof IvyArtifactRepository) {
        metadataSources {
            artifact()
        }
    }
}
node {
    download = true
}

task installMocha(type: NpmTask) {
    args = ['install', 'mocha']
}

task runMocha(type: NodeTask, dependsOn: [compileTestKotlinJs,
                                          populateNodeModules,
                                          installMocha]) {
    script = file('node_modules/mocha/bin/mocha')
    args = [compileTestKotlinJs.outputFile]
}

jsTest.dependsOn runMocha

