/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.kotlin.ide.konan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.jetbrains.kotlin.ide.konan.psi.NativeDefinitionsTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>NativeDefinitions.flex</tt>
 */
class NativeDefinitionsLexer implements FlexLexer, NativeDefinitionsTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_PLATFORM = 2;
  public static final int WAITING_VALUE = 4;
  public static final int CODE_END = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 13296 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\0\1\24\3\0\1\24\71\0\1\25\1\0\1\26\1\27\1\30"+
    "\1\31\2\27\16\0\1\32\1\20\1\33\1\34\2\0\1\35\11\0\1\36\21\0\1\35\1\37\23\0"+
    "\1\27\1\40\3\0\1\24\1\41\1\40\4\0\1\42\1\40\4\0\1\36\1\43\1\27\3\0\2\44\1"+
    "\27\1\30\1\45\1\0\1\44\11\0\1\25\14\0\1\46\1\36\1\0\1\47\1\0\1\50\1\27\1\42"+
    "\7\0\1\51\14\0\1\26\1\27\6\0\1\52\1\23\5\0\1\52\2\27\3\0\1\2\10\27\1\47\1"+
    "\30\6\27\1\53\2\0\1\24\14\0\1\54\1\0\2\40\1\55\1\50\1\56\2\0\1\47\1\57\1\60"+
    "\1\50\1\61\1\42\1\62\1\54\1\0\1\2\1\45\1\55\1\63\1\56\2\0\1\47\1\64\1\65\1"+
    "\63\1\66\1\41\1\67\1\70\1\0\1\52\1\27\1\55\1\36\1\35\2\0\1\47\1\71\1\60\1"+
    "\36\1\72\1\73\1\27\1\54\1\0\1\41\1\27\1\55\1\50\1\56\2\0\1\47\1\71\1\60\1"+
    "\50\1\66\1\70\1\62\1\54\1\0\1\41\1\27\1\74\1\75\1\76\1\77\1\100\1\75\1\0\1"+
    "\25\1\75\1\76\1\101\1\27\1\70\1\0\1\27\1\41\1\55\1\32\1\47\2\0\1\47\1\46\1"+
    "\102\1\32\1\76\1\103\1\26\1\54\1\0\2\27\1\74\1\32\1\47\2\0\1\47\1\46\1\60"+
    "\1\32\1\76\1\103\1\33\1\54\1\0\1\104\1\27\1\74\1\32\1\47\4\0\1\51\1\32\1\105"+
    "\1\42\1\27\1\54\1\0\1\27\1\37\1\74\1\0\1\24\1\37\2\0\1\35\1\106\1\24\1\107"+
    "\1\110\1\0\2\27\1\111\1\27\1\40\6\0\1\63\1\0\1\24\1\0\1\26\4\27\1\112\1\113"+
    "\1\53\1\40\1\114\1\74\1\0\1\72\1\110\1\52\1\0\1\60\4\27\1\73\2\27\1\26\1\0"+
    "\1\26\1\115\1\116\1\0\1\40\3\0\1\30\1\40\1\0\1\32\2\0\1\40\3\0\1\30\1\33\7"+
    "\27\11\0\1\26\11\0\1\52\4\0\1\36\1\22\5\0\1\117\51\0\1\76\1\24\1\76\5\0\1"+
    "\76\4\0\1\76\1\24\1\76\1\0\1\24\7\0\1\76\10\0\1\51\4\27\2\0\2\27\12\0\1\30"+
    "\1\27\1\40\114\0\1\50\2\0\1\40\2\0\1\44\11\0\1\75\1\73\1\27\1\0\1\32\1\30"+
    "\1\27\2\0\1\30\1\27\2\0\1\2\1\27\1\0\1\32\1\120\1\27\12\0\1\121\1\122\1\0"+
    "\1\26\3\27\1\122\1\0\1\26\13\0\1\27\5\0\1\44\10\0\1\52\1\27\3\0\1\30\1\0\1"+
    "\2\1\0\1\2\1\70\4\0\1\52\1\30\1\27\5\0\1\2\3\0\1\26\1\0\1\26\4\27\3\0\1\2"+
    "\7\0\1\24\3\0\1\50\1\0\1\26\1\0\1\26\1\42\13\27\11\0\1\2\1\0\1\26\1\27\1\123"+
    "\1\2\1\27\16\0\1\2\1\27\7\0\1\27\1\0\1\102\5\0\1\52\12\27\1\117\3\0\1\24\1"+
    "\27\34\0\1\24\2\27\1\53\42\0\2\52\4\0\2\52\1\0\1\124\3\0\1\52\6\0\1\32\1\110"+
    "\1\125\1\30\1\54\1\2\1\0\1\30\1\125\1\30\1\27\1\123\3\27\1\126\1\27\1\42\1"+
    "\73\1\27\1\127\1\27\1\30\1\37\1\41\1\42\2\27\1\0\1\30\3\0\1\44\2\27\1\0\1"+
    "\30\1\130\1\0\1\73\1\27\1\107\1\37\1\106\1\131\1\31\1\132\1\0\1\60\1\133\1"+
    "\134\2\27\5\0\1\73\116\27\5\0\1\24\5\0\1\24\20\0\1\30\1\123\1\2\1\27\4\0\1"+
    "\36\1\22\7\0\1\42\1\27\1\42\2\0\1\24\1\27\10\24\4\0\5\27\1\42\72\27\1\133"+
    "\3\27\1\40\1\0\1\131\1\30\1\40\11\0\1\24\1\135\1\40\12\0\1\117\1\133\4\0\1"+
    "\52\1\40\12\0\1\24\2\27\3\0\1\44\6\27\170\0\1\52\11\27\71\0\1\30\6\27\21\0"+
    "\1\30\10\27\5\0\1\52\41\0\1\30\3\0\1\2\2\27\6\0\1\53\1\36\3\0\1\42\12\0\1"+
    "\26\3\27\1\42\1\0\1\37\14\0\1\61\1\2\1\27\1\0\1\44\11\27\6\0\2\27\1\73\6\0"+
    "\1\2\1\27\10\0\1\30\1\27\1\0\1\26\3\0\1\45\5\0\1\52\4\0\1\2\1\27\3\0\1\30"+
    "\10\0\1\73\1\42\1\0\1\26\4\27\6\0\1\24\1\27\1\0\1\52\1\0\1\26\2\0\1\24\1\111"+
    "\10\0\1\44\2\27\1\122\2\0\1\136\1\27\3\137\1\27\2\24\22\27\5\0\1\140\1\0\1"+
    "\26\64\0\1\2\1\27\2\0\1\24\1\123\5\0\1\2\40\27\55\0\1\52\15\0\1\26\4\27\1"+
    "\24\1\27\1\123\1\133\1\0\1\47\1\24\1\110\1\141\15\0\1\26\3\27\1\123\54\0\1"+
    "\52\2\27\10\0\1\37\6\0\5\27\1\0\1\30\2\0\2\27\1\24\1\27\1\100\2\27\1\133\3"+
    "\27\1\41\1\32\20\0\1\50\1\127\1\27\1\0\1\26\1\40\2\0\1\63\1\40\2\0\1\44\1"+
    "\70\12\0\1\24\3\37\1\142\1\143\2\27\1\144\1\0\1\46\2\0\1\24\2\0\1\145\1\0"+
    "\1\52\1\0\1\52\4\27\17\0\1\44\10\27\6\0\1\30\20\27\1\22\20\27\3\0\1\30\6\0"+
    "\1\73\5\27\3\0\1\24\2\27\3\0\1\44\6\27\3\0\1\52\4\0\1\2\1\0\1\131\5\27\23"+
    "\0\1\52\1\0\1\26\52\27\1\52\1\47\4\0\1\36\1\146\2\0\1\52\25\27\2\0\1\52\1"+
    "\27\3\0\1\26\10\27\7\0\1\70\10\27\1\147\1\53\1\46\1\40\2\0\1\2\1\63\4\27\3"+
    "\0\1\30\20\27\6\0\1\52\1\27\2\0\1\52\1\27\2\0\1\44\21\27\11\0\1\73\66\27\10"+
    "\0\1\24\3\27\1\70\1\0\2\27\7\0\1\150\2\27\3\0\1\73\1\0\1\26\6\0\1\32\1\0\10"+
    "\27\10\0\1\30\1\27\1\0\1\26\24\27\7\0\1\27\1\0\1\26\46\27\55\0\1\24\22\27"+
    "\14\0\1\44\63\27\5\0\1\24\72\27\7\0\1\73\130\27\10\0\1\30\1\27\5\0\1\24\1"+
    "\27\1\42\2\0\14\27\1\26\153\27\1\133\1\102\2\0\1\51\1\2\3\27\1\20\22\27\1"+
    "\142\67\27\12\0\1\32\10\0\1\32\1\151\1\152\1\0\1\153\1\46\7\0\1\36\1\51\2"+
    "\32\3\0\1\154\1\110\1\37\1\47\51\0\1\52\3\0\1\47\2\0\1\117\3\0\1\117\2\0\1"+
    "\32\3\0\1\32\2\0\1\24\3\0\1\24\3\0\1\47\3\0\1\47\2\0\1\117\1\54\6\0\1\46\3"+
    "\0\1\112\1\40\1\117\1\155\1\107\1\156\1\112\1\124\1\112\2\117\1\67\1\0\1\35"+
    "\1\0\1\2\1\55\1\35\1\0\1\2\50\27\32\0\1\24\5\27\106\0\1\30\1\27\33\0\1\52"+
    "\74\27\1\41\3\27\14\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 888 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\4\1\2\1\1\1\5\1\3\6\7\4\0\1\14\1\15\1\0\1\15\1\7\10\0\1\16\1\12\1"+
    "\0\2\7\1\61\1\60\1\63\1\7\1\62\3\7\1\6\2\0\1\6\3\0\2\7\1\42\1\36\1\56\1\52"+
    "\2\7\1\40\2\7\1\54\1\51\1\7\1\27\1\46\2\7\1\53\7\7\1\0\1\13\2\0\1\57\1\0\1"+
    "\34\1\35\1\17\1\32\1\25\1\64\1\37\1\43\1\23\1\7\1\44\1\24\1\21\1\33\1\20\1"+
    "\22\1\7\1\26\1\31\1\30\1\50\1\11\1\55\1\47\1\45\1\41\4\0\6\7\1\10\2\7\2\0"+
    "\4\7\4\0\1\7\2\0\1\7\7\0\1\7\4\0\1\7\5\0\7\7\1\0\2\7\4\0\4\7\16\0\5\7\7\0"+
    "\1\7\1\0\1\7\1\0\5\7\1\0\2\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0\4\7\1\0\13\7\1\0"+
    "\1\7\2\0\6\7\1\0\7\7\1\0\1\7\15\0\1\7\1\0\2\7\1\0\2\7\1\0\4\7\10\0\1\7\4\0"+
    "\4\7\1\0\4\7\1\0\13\7\2\0\4\7\2\0\11\7\6\0\10\7\2\0\2\7\1\0\3\7\1\0\4\7\2"+
    "\0\6\7\1\0\1\7\3\0\4\7\2\0\5\7\2\0\4\7\5\0\2\7\1\0\4\7\4\0\2\7\1\0\2\7\1\0"+
    "\2\7\1\0\2\7\2\0\1\7\1\0\3\7\2\0\3\7\3\0\4\7\1\0\1\7\7\0\3\7\1\0\2\7\1\0\5"+
    "\7\1\0\3\7\2\0\1\7\11\0\2\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2"+
    "\7\3\0\2\7\3\0\1\7\6\0\3\7\3\0\3\7\5\0\2\7\2\0\2\7\5\0\1\7\1\0\5\7\1\0\4\7"+
    "\1\0\1\7\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\5\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2"+
    "\0\1\7\3\0\3\7\1\0\1\7\1\0\1\7\5\0\1\7\1\0\1\7\1\0\1\7\4\0\5\7\1\0\5\7\1\0"+
    "\2\7\4\0\4\7\3\0\1\7\3\0\3\7\5\0\5\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\2\0\3"+
    "\7\1\0\2\7\2\1\5\7\5\0\1\7\4\0\1\7\3\0\3\7\1\0\5\7\2\0\1\7\1\0\4\7\1\0\1\7"+
    "\5\0\5\7\4\0\1\7\2\0\2\7\2\0\3\7\2\0\5\7\2\0\6\7\1\0\3\7\1\0\2\7\2\0\2\7\1"+
    "\0\2\7\1\0\2\7\2\0\3\7\3\0\2\7\3\0\2\7\2\0\3\7\4\0\3\7\1\0\2\7\1\0\2\7\3\0"+
    "\1\7\2\0\5\7\1\0\2\7\1\0\3\7\2\0\1\7\4\0\1\7\2\0\2\7\2\0\4\7\1\0\4\7\1\0\1"+
    "\7\1\0\5\7\1\0\4\7\2\0\1\7\1\0\1\7\5\0\1\7\1\0\1\7\1\0\3\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\3\1\4\12\2"+
    "\1\4\1\3\1\5\1\4\2\6\1\3\1\4\1\1"+
    "\1\3\1\0\2\7\14\2\1\10\10\11\1\0\1\6"+
    "\20\2\11\11\3\12\17\2\1\13\3\11\1\14\3\11"+
    "\1\15\1\11\17\2\10\11\1\16\2\2\1\17\14\2"+
    "\2\11\1\20\3\11\1\21\1\22\1\23\2\11\1\2"+
    "\1\24\11\2\1\25\2\2\1\26\1\2\1\11\1\27"+
    "\6\11\1\30\3\2\1\31\13\2\4\11\1\32\3\11"+
    "\1\33\17\2\1\34\10\11\1\2\1\35\1\2\1\36"+
    "\13\2\1\37\1\40\1\41\1\42\2\11\1\43\1\11"+
    "\7\2\1\44\5\2\3\11\1\45\1\46\11\2\1\47"+
    "\4\11\11\2\1\11\1\50\3\11\1\51\6\2\1\52"+
    "\1\2\2\11\1\53\1\54\4\2\1\55\2\2\1\56"+
    "\1\11\6\2\1\57\1\60\1\2\1\61\6\2\1\62"+
    "\14\2\1\63\4\2\1\64\11\2\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u013e\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\237\0\u01a8\0\u0597\0\u05cc"+
    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\u03ef\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u052d\0\u0a25\0\u0a5a"+
    "\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\324\0\u013e\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\u087d\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u1415\0\u087d\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e"+
    "\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6"+
    "\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e"+
    "\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16"+
    "\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\u1d9b\0\u1dd0\0\u087d\0\u087d\0\u1e05\0\u1e3a\0\u1e6f\0\324"+
    "\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017"+
    "\0\u204c\0\324\0\u2081\0\u20b6\0\324\0\u20eb\0\u2120\0\u087d"+
    "\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u087d\0\u2293"+
    "\0\u22c8\0\u22fd\0\324\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406"+
    "\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae"+
    "\0\u25e3\0\u2618\0\u087d\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721"+
    "\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9"+
    "\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u087d\0\u2a3c"+
    "\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4"+
    "\0\324\0\u2c19\0\324\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22"+
    "\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u087d\0\u087d"+
    "\0\u087d\0\u087d\0\u2e95\0\u2eca\0\u087d\0\u2eff\0\u2f34\0\u2f69"+
    "\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072\0\324\0\u30a7\0\u30dc"+
    "\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\324\0\324"+
    "\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2"+
    "\0\u33f7\0\324\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535"+
    "\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd"+
    "\0\u087d\0\u3712\0\u3747\0\u377c\0\324\0\u37b1\0\u37e6\0\u381b"+
    "\0\u3850\0\u3885\0\u38ba\0\324\0\u38ef\0\u3924\0\u3959\0\u087d"+
    "\0\u087d\0\u398e\0\u39c3\0\u39f8\0\u3a2d\0\324\0\u3a62\0\u3a97"+
    "\0\u087d\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5\0\u3c0a"+
    "\0\u087d\0\324\0\u3c3f\0\324\0\u3c74\0\u3ca9\0\u3cde\0\u3d13"+
    "\0\u3d48\0\u3d7d\0\324\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86"+
    "\0\u3ebb\0\u3ef0\0\u3f25\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\324"+
    "\0\u402e\0\u4063\0\u4098\0\u40cd\0\324\0\u4102\0\u4137\0\u416c"+
    "\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275\0\u42aa\0\324";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\5\1\6\1\5\2\6\1\7\2\5\1\10\1\7"+
    "\1\11\1\6\1\12\1\13\1\14\2\5\1\15\1\5"+
    "\1\16\1\17\3\5\1\20\1\21\1\22\7\5\1\23"+
    "\21\5\1\7\1\24\1\25\1\24\1\6\1\25\1\26"+
    "\1\7\1\24\1\6\1\27\1\7\1\6\50\7\1\30"+
    "\1\31\1\25\1\31\1\32\1\25\2\30\1\31\1\32"+
    "\1\30\1\33\1\6\50\30\2\34\1\35\1\34\2\35"+
    "\3\34\1\35\2\34\1\35\50\34\2\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\50\5\2\0\1\6"+
    "\1\0\2\6\3\0\1\6\2\0\1\6\135\0\2\5"+
    "\1\6\1\5\2\6\1\0\2\5\1\10\1\0\1\36"+
    "\1\6\50\5\14\0\1\5\50\0\2\12\1\0\1\5"+
    "\3\37\3\12\1\37\1\40\1\37\50\12\2\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\1\5\1\41"+
    "\50\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\3\5\1\42\46\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\17\5\1\43\32\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\6\5\1\44\10\5\1\45"+
    "\32\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\16\5\1\46\13\5\1\47\17\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\13\5\1\50\36\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\6\5\1\51"+
    "\1\5\1\52\41\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\3\5\1\53\46\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\10\5\1\54\37\5\1\0"+
    "\5\55\2\0\2\55\2\0\1\55\51\0\1\55\1\25"+
    "\1\55\2\25\2\0\1\55\1\25\2\0\1\25\57\0"+
    "\3\56\5\0\1\56\1\57\1\60\1\56\1\61\1\62"+
    "\7\56\1\63\12\56\1\64\5\56\1\65\7\56\2\30"+
    "\1\0\2\30\1\0\5\30\1\66\52\30\1\31\1\55"+
    "\2\31\1\55\2\30\2\31\1\30\1\66\1\31\52\30"+
    "\1\6\1\30\1\32\1\6\3\30\1\32\1\30\1\66"+
    "\1\32\53\30\1\67\61\30\65\34\2\37\2\0\63\37"+
    "\2\0\10\37\1\12\50\37\2\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\1\5\1\70\50\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\4\5\1\71"+
    "\45\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\2\5\1\72\47\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\16\5\1\73\1\5\1\74\31\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\16\5\1\75"+
    "\33\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\13\5\1\76\36\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\2\5\1\77\2\5\1\100\44\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\11\5\1\101"+
    "\5\5\1\102\32\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\14\5\1\103\35\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\5\5\1\104\44\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\16\5\1\105"+
    "\17\5\1\106\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\17\5\1\107\30\5\7\0\3\56\5\0"+
    "\46\56\7\0\3\56\5\0\12\56\1\110\33\56\7\0"+
    "\3\56\5\0\4\56\1\111\10\56\1\112\30\56\7\0"+
    "\3\56\5\0\1\56\1\113\44\56\7\0\3\56\5\0"+
    "\4\56\1\114\41\56\7\0\3\56\5\0\7\56\1\115"+
    "\4\56\1\116\31\56\7\0\3\56\5\0\43\56\1\117"+
    "\2\56\7\0\3\56\5\0\15\56\1\120\30\56\5\30"+
    "\1\0\5\30\1\66\51\30\1\5\1\121\1\122\1\123"+
    "\1\0\1\122\1\0\1\5\1\121\1\5\1\0\1\36"+
    "\1\0\52\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\5\5\1\124\44\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\27\5\1\125\22\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\27\5\1\126\22\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\11\5"+
    "\1\127\40\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\22\5\1\130\27\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\11\5\1\131\40\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\7\5\1\132\42\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\3\5"+
    "\1\133\46\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\6\5\1\134\43\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\13\5\1\135\36\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\17\5\1\136\32\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\10\5"+
    "\1\137\41\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\36\5\1\140\13\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\13\5\1\141\36\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\15\5\1\142\32\5"+
    "\7\0\3\56\5\0\30\56\1\143\15\56\7\0\3\56"+
    "\5\0\3\56\1\144\10\56\1\145\31\56\7\0\3\56"+
    "\5\0\1\146\45\56\7\0\3\56\5\0\12\56\1\147"+
    "\33\56\7\0\3\56\5\0\14\56\1\150\31\56\7\0"+
    "\3\56\5\0\2\56\1\151\43\56\7\0\3\56\5\0"+
    "\13\56\1\152\32\56\7\0\3\56\5\0\44\56\1\153"+
    "\1\56\7\0\3\56\5\0\12\56\1\154\33\56\2\5"+
    "\1\122\1\5\3\0\3\5\1\0\1\36\1\0\52\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\6\5"+
    "\1\155\43\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\17\5\1\156\32\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\10\5\1\157\41\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\17\5\1\160\32\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\33\5"+
    "\1\161\16\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\30\5\1\162\21\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\33\5\1\163\16\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\11\5\1\164\40\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\2\5"+
    "\1\165\47\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\6\5\1\166\43\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\20\5\1\167\31\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\16\5\1\170\33\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\13\5"+
    "\1\171\36\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\11\5\1\172\40\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\10\5\1\173\37\5\7\0\3\56"+
    "\5\0\12\56\1\174\33\56\7\0\3\56\5\0\20\56"+
    "\1\175\25\56\7\0\3\56\5\0\1\56\1\176\44\56"+
    "\7\0\3\56\5\0\40\56\1\177\5\56\7\0\3\56"+
    "\5\0\31\56\1\200\14\56\7\0\3\56\5\0\41\56"+
    "\1\201\1\56\1\202\2\56\7\0\3\56\5\0\7\56"+
    "\1\203\36\56\7\0\3\56\5\0\2\56\1\204\43\56"+
    "\2\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\7\5\1\205\42\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\22\5\1\206\27\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\11\5\1\207\40\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\11\5\1\210"+
    "\40\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\17\5\1\211\32\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\31\5\1\212\20\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\15\5\1\213\34\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\13\5\1\214"+
    "\36\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\13\5\1\215\36\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\2\5\1\216\47\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\7\5\1\217\42\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\15\5\1\220"+
    "\34\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\11\5\1\221\40\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\6\5\1\222\43\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\11\5\1\223\36\5\7\0"+
    "\3\56\5\0\6\56\1\224\32\56\1\225\4\56\7\0"+
    "\3\56\5\0\36\56\1\226\7\56\7\0\3\56\5\0"+
    "\12\56\1\227\33\56\7\0\3\56\5\0\15\56\1\230"+
    "\12\56\1\231\15\56\7\0\3\56\5\0\30\56\1\232"+
    "\15\56\7\0\3\56\5\0\42\56\1\233\3\56\7\0"+
    "\3\56\5\0\44\56\1\234\1\56\7\0\3\56\5\0"+
    "\1\56\1\235\44\56\7\0\3\56\5\0\41\56\1\236"+
    "\4\56\2\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\10\5\1\237\41\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\10\5\1\240\41\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\12\5\1\241\37\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\30\5"+
    "\1\242\21\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\22\5\1\243\27\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\3\5\1\244\46\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\10\5\1\245\41\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\35\5"+
    "\1\246\14\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\41\5\1\247\10\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\37\5\1\250\12\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\10\5\1\251\41\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\14\5"+
    "\1\252\35\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\6\5\1\253\43\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\16\5\1\254\33\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\14\5\1\255\20\5"+
    "\1\256\12\5\7\0\3\56\5\0\5\56\1\257\40\56"+
    "\7\0\3\56\5\0\42\56\1\260\3\56\7\0\3\56"+
    "\5\0\40\56\1\261\5\56\7\0\3\56\5\0\40\56"+
    "\1\262\5\56\7\0\3\56\5\0\7\56\1\263\36\56"+
    "\7\0\3\56\5\0\43\56\1\264\2\56\7\0\3\56"+
    "\5\0\40\56\1\265\5\56\7\0\3\56\5\0\4\56"+
    "\1\266\41\56\7\0\3\56\5\0\42\56\1\267\3\56"+
    "\2\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\11\5\1\270\40\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\5\5\1\271\44\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\31\5\1\272\20\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\10\5\1\273"+
    "\41\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\6\5\1\274\43\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\15\5\1\275\3\5\1\276\14\5\1\277"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\3\5\1\300\46\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\16\5\1\301\33\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\6\5\1\302\43\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\21\5\1\303"+
    "\30\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\2\5\1\304\47\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\22\5\1\305\27\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\6\5\1\306\41\5\7\0"+
    "\3\56\5\0\41\56\1\307\4\56\7\0\3\56\5\0"+
    "\30\56\1\310\15\56\7\0\3\56\5\0\30\56\1\311"+
    "\15\56\7\0\3\56\5\0\2\56\1\312\43\56\7\0"+
    "\3\56\5\0\44\56\1\313\1\56\7\0\3\56\5\0"+
    "\2\56\1\314\12\56\1\315\12\56\1\316\15\56\7\0"+
    "\3\56\5\0\13\56\1\317\32\56\2\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\12\5\1\320\37\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\13\5"+
    "\1\321\36\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\17\5\1\322\32\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\16\5\1\323\33\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\34\5\1\324\1\325"+
    "\14\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\10\5\1\326\41\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\30\5\1\327\21\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\11\5\1\330\40\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\33\5\1\331"+
    "\16\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\20\5\1\332\31\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\10\5\1\333\41\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\13\5\1\334\36\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\25\5\1\335"+
    "\24\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\7\5\1\336\40\5\7\0\3\56\5\0\42\56\1\337"+
    "\3\56\7\0\3\56\5\0\43\56\1\340\2\56\7\0"+
    "\3\56\5\0\43\56\1\341\2\56\7\0\3\56\5\0"+
    "\41\56\1\342\1\56\1\343\2\56\7\0\3\56\5\0"+
    "\4\56\1\344\41\56\7\0\3\56\5\0\7\56\1\345"+
    "\36\56\7\0\3\56\5\0\43\56\1\346\2\56\7\0"+
    "\3\56\5\0\40\56\1\347\5\56\2\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\5\5\1\350\44\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\14\5"+
    "\1\351\35\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\13\5\1\352\36\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\13\5\1\353\36\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\17\5\1\354\32\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\33\5"+
    "\1\355\16\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\5\5\1\356\44\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\14\5\1\357\35\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\40\5\1\360\11\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\4\5"+
    "\1\361\45\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\11\5\1\362\40\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\14\5\1\363\35\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\41\5\1\364\10\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\3\5"+
    "\1\365\46\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\13\5\1\366\34\5\7\0\3\56\5\0\44\56"+
    "\1\367\1\56\7\0\3\56\5\0\44\56\1\370\1\56"+
    "\7\0\3\56\5\0\42\56\1\371\3\56\7\0\3\56"+
    "\5\0\44\56\1\372\1\56\7\0\3\56\5\0\3\56"+
    "\1\373\42\56\7\0\3\56\5\0\2\56\1\374\43\56"+
    "\7\0\3\56\5\0\44\56\1\375\1\56\7\0\3\56"+
    "\5\0\15\56\1\376\30\56\2\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\13\5\1\377\36\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\26\5\1\u0100"+
    "\23\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\2\5\1\u0101\47\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\16\5\1\u0102\33\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\10\5\1\u0103\41\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\13\5\1\u0104"+
    "\36\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\17\5\1\u0105\32\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\14\5\1\u0106\35\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\17\5\1\u0107\32\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\6\5\1\u0108"+
    "\43\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\16\5\1\u0109\33\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\16\5\1\u010a\33\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\10\5\1\u010b\37\5\7\0"+
    "\3\56\5\0\12\56\1\u010c\33\56\7\0\3\56\5\0"+
    "\41\56\1\u010d\4\56\7\0\3\56\5\0\7\56\1\u010e"+
    "\36\56\2\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\14\5\1\u010f\35\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\14\5\1\u0110\35\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\11\5\1\u0111\40\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\2\5"+
    "\1\u0112\47\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\16\5\1\u0113\33\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\10\5\1\u0114\41\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\11\5\1\u0115\40\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\11\5"+
    "\1\u0116\40\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\22\5\1\u0117\27\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\33\5\1\u0118\16\5\1\0\1\5"+
    "\3\0\2\5\1\u0119\1\0\1\36\1\0\52\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\11\5\1\u011a"+
    "\36\5\7\0\3\56\5\0\6\56\1\u011b\32\56\1\u011c"+
    "\4\56\7\0\3\56\5\0\42\56\1\u011d\3\56\7\0"+
    "\3\56\5\0\2\56\1\u011e\43\56\2\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\3\5\1\u011f\46\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\13\5"+
    "\1\u0120\36\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\15\5\1\u0121\34\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\4\5\1\u0122\45\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\15\5\1\u0123\34\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\6\5"+
    "\1\u0124\43\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\16\5\1\u0125\33\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\4\5\1\u0126\45\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\10\5\1\u0127\37\5"+
    "\7\0\3\56\5\0\5\56\1\u0128\40\56\7\0\3\56"+
    "\5\0\42\56\1\u0129\3\56\7\0\3\56\5\0\40\56"+
    "\1\u012a\5\56\7\0\3\56\5\0\41\56\1\u012b\1\56"+
    "\1\u012c\2\56\2\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\14\5\1\u012d\35\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\6\5\1\u012e\43\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\10\5\1\u012f"+
    "\41\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\37\5\1\u0130\12\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\21\5\1\u0131\30\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\10\5\1\u0132\41\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\17\5\1\u0133"+
    "\32\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\14\5\1\u0134\35\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\11\5\1\u0135\36\5\7\0\3\56\5\0"+
    "\41\56\1\u0136\4\56\7\0\3\56\5\0\24\56\1\u0137"+
    "\21\56\7\0\3\56\5\0\42\56\1\u0138\3\56\7\0"+
    "\3\56\5\0\44\56\1\u0139\1\56\2\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\3\5\1\u013a\46\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\16\5"+
    "\1\u013b\33\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\6\5\1\u013c\43\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\10\5\1\u013d\41\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\14\5\1\u013e\35\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\13\5"+
    "\1\u013f\36\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\14\5\1\u0140\33\5\7\0\3\56\5\0\42\56"+
    "\1\u0141\3\56\7\0\3\56\5\0\45\56\1\u0142\2\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\16\5"+
    "\1\u0143\33\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\13\5\1\u0144\36\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\36\1\0\20\5\1\u0145\31\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\36\1\0\2\5\1\u0146\47\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\36\1\0\10\5"+
    "\1\u0147\41\5\1\0\1\5\3\0\3\5\1\0\1\36"+
    "\1\0\6\5\1\u0148\41\5\7\0\3\56\5\0\3\56"+
    "\1\u0149\42\56\2\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\14\5\1\u014a\35\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\34\5\1\u014b\15\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\14\5\1\u014c"+
    "\35\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\7\5\1\u014d\42\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\15\5\1\u014e\34\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\3\5\1\u014f\46\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\3\5\1\u0150"+
    "\46\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\17\5\1\u0151\32\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\23\5\1\u0152\26\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\16\5\1\u0153\33\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\15\5\1\u0154"+
    "\34\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\11\5\1\u0155\40\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\16\5\1\u0156\33\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\33\5\1\u0157\16\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\17\5\1\u0158"+
    "\32\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\6\5\1\u0159\43\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\7\5\1\u015a\42\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\13\5\1\u015b\36\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\13\5\1\u015c"+
    "\36\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\10\5\1\u015d\41\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\6\5\1\u015e\43\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\6\5\1\u015f\43\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\14\5\1\u0160"+
    "\35\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\3\5\1\u0161\46\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\17\5\1\u0162\32\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\16\5\1\u0163\33\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\7\5\1\u0164"+
    "\42\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\14\5\1\u0165\35\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\6\5\1\u0166\43\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\24\5\1\u0167\25\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\10\5\1\u0168"+
    "\41\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\11\5\1\u0169\40\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\25\5\1\u016a\24\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\26\5\1\u016b\23\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\36\1\0\10\5\1\u016c"+
    "\41\5\1\0\1\5\3\0\3\5\1\0\1\36\1\0"+
    "\2\5\1\u016d\47\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\36\1\0\27\5\1\u016e\22\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\36\1\0\14\5\1\u016f\33\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17119];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\1\1\11\16\1\1\11\7\1\1\0\27\1"+
    "\1\0\33\1\1\11\u011d\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[367];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NativeDefinitionsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return CODE_CHARS;
            } 
            // fall through
          case 54: break;
          case 2: 
            { yybegin(WAITING_PLATFORM); return UNKNOWN_KEY;
            } 
            // fall through
          case 55: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 56: break;
          case 4: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 57: break;
          case 5: 
            { yybegin(WAITING_VALUE); return SEPARATOR;
            } 
            // fall through
          case 58: break;
          case 6: 
            { yybegin(YYINITIAL); return VALUE;
            } 
            // fall through
          case 59: break;
          case 7: 
            { return COMMENT;
            } 
            // fall through
          case 60: break;
          case 8: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 61: break;
          case 9: 
            { return UNKNOWN_PLATFORM;
            } 
            // fall through
          case 62: break;
          case 10: 
            { yybegin(CODE_END); return DELIM;
            } 
            // fall through
          case 63: break;
          case 11: 
            { return OSX;
            } 
            // fall through
          case 64: break;
          case 12: 
            { return IOS;
            } 
            // fall through
          case 65: break;
          case 13: 
            { return X64;
            } 
            // fall through
          case 66: break;
          case 14: 
            { return WASM;
            } 
            // fall through
          case 67: break;
          case 15: 
            { yybegin(WAITING_PLATFORM); return LINKER;
            } 
            // fall through
          case 68: break;
          case 16: 
            { return MINGW;
            } 
            // fall through
          case 69: break;
          case 17: 
            { return LINUX;
            } 
            // fall through
          case 70: break;
          case 18: 
            { return ARM32;
            } 
            // fall through
          case 71: break;
          case 19: 
            { return ARM64;
            } 
            // fall through
          case 72: break;
          case 20: 
            { yybegin(WAITING_PLATFORM); return PACKAGE;
            } 
            // fall through
          case 73: break;
          case 21: 
            { yybegin(WAITING_PLATFORM); return DEPENDS;
            } 
            // fall through
          case 74: break;
          case 22: 
            { yybegin(WAITING_PLATFORM); return HEADERS;
            } 
            // fall through
          case 75: break;
          case 23: 
            { return MIPS32;
            } 
            // fall through
          case 76: break;
          case 24: 
            { return WASM32;
            } 
            // fall through
          case 77: break;
          case 25: 
            { yybegin(WAITING_PLATFORM); return LANGUAGE;
            } 
            // fall through
          case 78: break;
          case 26: 
            { return IOS_X64;
            } 
            // fall through
          case 79: break;
          case 27: 
            { return ANDROID;
            } 
            // fall through
          case 80: break;
          case 28: 
            { return MIPSEL32;
            } 
            // fall through
          case 81: break;
          case 29: 
            { yybegin(WAITING_PLATFORM); return LINKER_OPTS;
            } 
            // fall through
          case 82: break;
          case 30: 
            { yybegin(WAITING_PLATFORM); return ENTRY_POINT;
            } 
            // fall through
          case 83: break;
          case 31: 
            { return MINGW_X64;
            } 
            // fall through
          case 84: break;
          case 32: 
            { return MACOS_X64;
            } 
            // fall through
          case 85: break;
          case 33: 
            { return IOS_ARM32;
            } 
            // fall through
          case 86: break;
          case 34: 
            { return IOS_ARM64;
            } 
            // fall through
          case 87: break;
          case 35: 
            { return LINUX_X64;
            } 
            // fall through
          case 88: break;
          case 36: 
            { yybegin(WAITING_PLATFORM); return STRICT_ENUMS;
            } 
            // fall through
          case 89: break;
          case 37: 
            { yybegin(WAITING_PLATFORM); return COMPILER_OPTS;
            } 
            // fall through
          case 90: break;
          case 38: 
            { yybegin(WAITING_PLATFORM); return LIBRARY_PATHS;
            } 
            // fall through
          case 91: break;
          case 39: 
            { yybegin(WAITING_PLATFORM); return HEADER_FILTER;
            } 
            // fall through
          case 92: break;
          case 40: 
            { return LINUX_MIPS32;
            } 
            // fall through
          case 93: break;
          case 41: 
            { yybegin(WAITING_PLATFORM); return EXCLUDED_MACROS;
            } 
            // fall through
          case 94: break;
          case 42: 
            { yybegin(WAITING_PLATFORM); return NON_STRICT_ENUMS;
            } 
            // fall through
          case 95: break;
          case 43: 
            { return ANDROID_ARM32;
            } 
            // fall through
          case 96: break;
          case 44: 
            { return ANDROID_ARM64;
            } 
            // fall through
          case 97: break;
          case 45: 
            { yybegin(WAITING_PLATFORM); return STATIC_LIBRARIES;
            } 
            // fall through
          case 98: break;
          case 46: 
            { return LINUX_MIPSEL32;
            } 
            // fall through
          case 99: break;
          case 47: 
            { return LINUX_ARM32_HFP;
            } 
            // fall through
          case 100: break;
          case 48: 
            { yybegin(WAITING_PLATFORM); return EXCLUDED_FUNCTIONS;
            } 
            // fall through
          case 101: break;
          case 49: 
            { yybegin(WAITING_PLATFORM); return EXCLUDE_SYSTEM_LIBS;
            } 
            // fall through
          case 102: break;
          case 50: 
            { yybegin(WAITING_PLATFORM); return NO_STRING_CONVERSION;
            } 
            // fall through
          case 103: break;
          case 51: 
            { yybegin(WAITING_PLATFORM); return EXCLUDE_DEPENDENT_MODULES;
            } 
            // fall through
          case 104: break;
          case 52: 
            { yybegin(WAITING_PLATFORM); return EXPORT_FORWARD_DECLARATIONS;
            } 
            // fall through
          case 105: break;
          case 53: 
            { yybegin(WAITING_PLATFORM); return DISABLE_DESIGNATED_INITIALIZER_CHECKS;
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
