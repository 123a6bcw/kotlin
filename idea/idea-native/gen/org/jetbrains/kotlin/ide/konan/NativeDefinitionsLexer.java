/*
 * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.kotlin.ide.konan;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.jetbrains.kotlin.ide.konan.psi.NativeDefinitionsTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>NativeDefinitions.flex</tt>
 */
class NativeDefinitionsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_PLATFORM = 2;
  public static final int WAITING_VALUE = 4;
  public static final int CODE_END = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 13280 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\3\0\1\17\1\20\1\21\1\22\2\0\1\23\3\0\1\23\71\0\1\24\1\0\1\25\1\26\1\27\1"+
    "\30\2\26\16\0\1\31\1\17\1\32\1\33\2\0\1\34\11\0\1\35\21\0\1\34\1\36\23\0\1"+
    "\26\1\37\3\0\1\23\1\40\1\37\4\0\1\41\1\37\4\0\1\35\1\42\1\26\3\0\2\43\1\26"+
    "\1\27\1\44\1\0\1\43\11\0\1\24\14\0\1\45\1\35\1\0\1\46\1\0\1\47\1\26\1\41\7"+
    "\0\1\50\14\0\1\25\1\26\6\0\1\51\1\22\5\0\1\51\2\26\3\0\1\2\10\26\1\46\1\27"+
    "\6\26\1\52\2\0\1\23\14\0\1\53\1\0\2\37\1\54\1\47\1\55\2\0\1\46\1\56\1\57\1"+
    "\47\1\60\1\41\1\61\1\53\1\0\1\2\1\44\1\54\1\62\1\55\2\0\1\46\1\63\1\64\1\62"+
    "\1\65\1\40\1\66\1\67\1\0\1\51\1\26\1\54\1\35\1\34\2\0\1\46\1\70\1\57\1\35"+
    "\1\71\1\72\1\26\1\53\1\0\1\40\1\26\1\54\1\47\1\55\2\0\1\46\1\70\1\57\1\47"+
    "\1\65\1\67\1\61\1\53\1\0\1\40\1\26\1\73\1\74\1\75\1\76\1\77\1\74\1\0\1\24"+
    "\1\74\1\75\1\100\1\26\1\67\1\0\1\26\1\40\1\54\1\31\1\46\2\0\1\46\1\45\1\101"+
    "\1\31\1\75\1\102\1\25\1\53\1\0\2\26\1\73\1\31\1\46\2\0\1\46\1\45\1\57\1\31"+
    "\1\75\1\102\1\32\1\53\1\0\1\103\1\26\1\73\1\31\1\46\4\0\1\50\1\31\1\104\1"+
    "\41\1\26\1\53\1\0\1\26\1\36\1\73\1\0\1\23\1\36\2\0\1\34\1\105\1\23\1\106\1"+
    "\107\1\0\2\26\1\110\1\26\1\37\6\0\1\62\1\0\1\23\1\0\1\25\4\26\1\111\1\112"+
    "\1\52\1\37\1\113\1\73\1\0\1\71\1\107\1\51\1\0\1\57\4\26\1\72\2\26\1\25\1\0"+
    "\1\25\1\114\1\115\1\0\1\37\3\0\1\27\1\37\1\0\1\31\2\0\1\37\3\0\1\27\1\32\7"+
    "\26\11\0\1\25\11\0\1\51\4\0\1\35\1\21\5\0\1\116\51\0\1\75\1\23\1\75\5\0\1"+
    "\75\4\0\1\75\1\23\1\75\1\0\1\23\7\0\1\75\10\0\1\50\4\26\2\0\2\26\12\0\1\27"+
    "\1\26\1\37\114\0\1\47\2\0\1\37\2\0\1\43\11\0\1\74\1\72\1\26\1\0\1\31\1\27"+
    "\1\26\2\0\1\27\1\26\2\0\1\2\1\26\1\0\1\31\1\117\1\26\12\0\1\120\1\121\1\0"+
    "\1\25\3\26\1\121\1\0\1\25\13\0\1\26\5\0\1\43\10\0\1\51\1\26\3\0\1\27\1\0\1"+
    "\2\1\0\1\2\1\67\4\0\1\51\1\27\1\26\5\0\1\2\3\0\1\25\1\0\1\25\4\26\3\0\1\2"+
    "\7\0\1\23\3\0\1\47\1\0\1\25\1\0\1\25\1\41\13\26\11\0\1\2\1\0\1\25\1\26\1\122"+
    "\1\2\1\26\16\0\1\2\1\26\7\0\1\26\1\0\1\101\5\0\1\51\12\26\1\116\3\0\1\23\1"+
    "\26\34\0\1\23\2\26\1\52\42\0\2\51\4\0\2\51\1\0\1\123\3\0\1\51\6\0\1\31\1\107"+
    "\1\124\1\27\1\53\1\2\1\0\1\27\1\124\1\27\1\26\1\122\3\26\1\125\1\26\1\41\1"+
    "\72\1\26\1\126\1\26\1\27\1\36\1\40\1\41\2\26\1\0\1\27\3\0\1\43\2\26\1\0\1"+
    "\27\1\127\1\0\1\72\1\26\1\106\1\36\1\105\1\130\1\30\1\131\1\0\1\57\1\132\1"+
    "\133\2\26\5\0\1\72\116\26\5\0\1\23\5\0\1\23\20\0\1\27\1\122\1\2\1\26\4\0\1"+
    "\35\1\21\7\0\1\41\1\26\1\41\2\0\1\23\1\26\10\23\4\0\5\26\1\41\72\26\1\132"+
    "\3\26\1\37\1\0\1\130\1\27\1\37\11\0\1\23\1\134\1\37\12\0\1\116\1\132\4\0\1"+
    "\51\1\37\12\0\1\23\2\26\3\0\1\43\6\26\170\0\1\51\11\26\71\0\1\27\6\26\21\0"+
    "\1\27\10\26\5\0\1\51\41\0\1\27\3\0\1\2\2\26\6\0\1\52\1\35\3\0\1\41\12\0\1"+
    "\25\3\26\1\41\1\0\1\36\14\0\1\60\1\2\1\26\1\0\1\43\11\26\6\0\2\26\1\72\6\0"+
    "\1\2\1\26\10\0\1\27\1\26\1\0\1\25\3\0\1\44\5\0\1\51\4\0\1\2\1\26\3\0\1\27"+
    "\10\0\1\72\1\41\1\0\1\25\4\26\6\0\1\23\1\26\1\0\1\51\1\0\1\25\2\0\1\23\1\110"+
    "\10\0\1\43\2\26\1\121\2\0\1\135\1\26\3\136\1\26\2\23\22\26\5\0\1\137\1\0\1"+
    "\25\64\0\1\2\1\26\2\0\1\23\1\122\5\0\1\2\40\26\55\0\1\51\15\0\1\25\4\26\1"+
    "\23\1\26\1\122\1\132\1\0\1\46\1\23\1\107\1\140\15\0\1\25\3\26\1\122\54\0\1"+
    "\51\2\26\10\0\1\36\6\0\5\26\1\0\1\27\2\0\2\26\1\23\1\26\1\77\2\26\1\132\3"+
    "\26\1\40\1\31\20\0\1\47\1\126\1\26\1\0\1\25\1\37\2\0\1\62\1\37\2\0\1\43\1"+
    "\67\12\0\1\23\3\36\1\141\1\142\2\26\1\143\1\0\1\45\2\0\1\23\2\0\1\144\1\0"+
    "\1\51\1\0\1\51\4\26\17\0\1\43\10\26\6\0\1\27\20\26\1\21\20\26\3\0\1\27\6\0"+
    "\1\72\5\26\3\0\1\23\2\26\3\0\1\43\6\26\3\0\1\51\4\0\1\2\1\0\1\130\5\26\23"+
    "\0\1\51\1\0\1\25\52\26\1\51\1\46\4\0\1\35\1\145\2\0\1\51\25\26\2\0\1\51\1"+
    "\26\3\0\1\25\10\26\7\0\1\67\10\26\1\146\1\52\1\45\1\37\2\0\1\2\1\62\4\26\3"+
    "\0\1\27\20\26\6\0\1\51\1\26\2\0\1\51\1\26\2\0\1\43\21\26\11\0\1\72\66\26\10"+
    "\0\1\23\3\26\1\67\1\0\2\26\7\0\1\147\2\26\3\0\1\72\1\0\1\25\6\0\1\31\1\0\10"+
    "\26\10\0\1\27\1\26\1\0\1\25\24\26\7\0\1\26\1\0\1\25\46\26\55\0\1\23\22\26"+
    "\14\0\1\43\63\26\5\0\1\23\72\26\7\0\1\72\130\26\10\0\1\27\1\26\5\0\1\23\1"+
    "\26\1\41\2\0\14\26\1\25\153\26\1\132\1\101\2\0\1\50\1\2\3\26\1\17\22\26\1"+
    "\141\67\26\12\0\1\31\10\0\1\31\1\150\1\151\1\0\1\152\1\45\7\0\1\35\1\50\2"+
    "\31\3\0\1\153\1\107\1\36\1\46\51\0\1\51\3\0\1\46\2\0\1\116\3\0\1\116\2\0\1"+
    "\31\3\0\1\31\2\0\1\23\3\0\1\23\3\0\1\46\3\0\1\46\2\0\1\116\1\53\6\0\1\45\3"+
    "\0\1\111\1\37\1\116\1\154\1\106\1\155\1\111\1\123\1\111\2\116\1\66\1\0\1\34"+
    "\1\0\1\2\1\54\1\34\1\0\1\2\50\26\32\0\1\23\5\26\106\0\1\27\1\26\33\0\1\51"+
    "\74\26\1\40\3\26\14\0\20\26\36\0\2\26");

  /* The ZZ_CMAP_A table has 880 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\4\1\2\1\1\1\5\1\3\6\7\4\0\1\14\1\15\1\0\1\15\1\7\10\0\1\16\1\12\1"+
    "\0\2\7\1\6\2\0\1\6\3\0\2\7\1\52\1\35\1\50\1\40\5\7\1\53\1\37\1\7\1\27\1\45"+
    "\2\7\1\47\7\7\1\0\1\13\2\0\1\7\1\0\1\42\1\43\1\17\1\34\1\25\1\7\1\51\1\41"+
    "\1\23\1\7\1\46\1\24\1\21\1\36\1\20\1\22\1\7\1\26\1\31\1\30\1\33\1\11\1\7\1"+
    "\32\1\44\1\7\4\0\6\7\1\10\2\7\2\0\4\7\4\0\1\7\2\0\1\7\7\0\1\7\4\0\1\7\5\0"+
    "\7\7\1\0\2\7\4\0\4\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\1\0\1\7\1\0\4\7\1\0\13\7\1\0\1\7\2\0\6\7\1\0\7\7\1\0\1\7\15\0\1\7\1\0"+
    "\2\7\1\0\2\7\1\0\4\7\10\0\1\7\4\0\4\7\1\0\4\7\1\0\13\7\2\0\4\7\2\0\11\7\6"+
    "\0\10\7\2\0\2\7\1\0\3\7\1\0\4\7\2\0\6\7\1\0\1\7\3\0\4\7\2\0\5\7\2\0\4\7\5"+
    "\0\2\7\1\0\4\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\7\1\0\3\7\2\0\3\7\3\0"+
    "\4\7\1\0\1\7\7\0\3\7\1\0\2\7\1\0\5\7\1\0\3\7\2\0\1\7\11\0\2\7\1\0\6\7\3\0"+
    "\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\1\7\6\0\3\7\3\0\3\7\5\0\2"+
    "\7\2\0\2\7\5\0\1\7\1\0\5\7\1\0\4\7\1\0\1\7\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7"+
    "\5\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\3\0\3\7\1\0\1\7\1\0\1\7\5\0\1\7\1"+
    "\0\1\7\1\0\1\7\4\0\5\7\1\0\5\7\1\0\2\7\4\0\4\7\3\0\1\7\3\0\3\7\5\0\5\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\0\2\7\2\1\5\7\5\0\1\7\4\0\1\7\3\0\3"+
    "\7\1\0\5\7\2\0\1\7\1\0\4\7\1\0\1\7\5\0\5\7\4\0\1\7\2\0\2\7\2\0\3\7\2\0\5\7"+
    "\2\0\6\7\1\0\3\7\1\0\2\7\2\0\2\7\1\0\2\7\1\0\2\7\2\0\3\7\3\0\2\7\3\0\2\7\2"+
    "\0\3\7\4\0\3\7\1\0\2\7\1\0\2\7\3\0\1\7\2\0\5\7\1\0\2\7\1\0\3\7\2\0\1\7\4\0"+
    "\1\7\2\0\2\7\2\0\4\7\1\0\4\7\1\0\1\7\1\0\5\7\1\0\4\7\2\0\1\7\1\0\1\7\5\0\1"+
    "\7\1\0\1\7\1\0\3\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\3\1\4\11\2"+
    "\1\4\1\3\1\5\1\4\2\6\1\3\1\4\1\1"+
    "\1\3\1\0\2\7\10\2\1\10\1\11\1\0\1\6"+
    "\13\2\3\12\34\2\1\13\67\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0108\0\u0370\0\u039c\0\u03c8"+
    "\0\u03f4\0\u0420\0\u044c\0\204\0\u0160\0\u0478\0\u04a4\0\u04d0"+
    "\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0318"+
    "\0\u0370\0\u0420\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c"+
    "\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\260\0\u0108"+
    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974"+
    "\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4"+
    "\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34"+
    "\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\260\0\u0d3c\0\u0d68"+
    "\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8"+
    "\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028"+
    "\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188"+
    "\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8"+
    "\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448"+
    "\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8"+
    "\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\5\1\6\1\5\2\6\1\7\2\5\1\10\1\7"+
    "\1\11\1\6\1\12\1\13\1\14\2\5\1\15\1\5"+
    "\1\16\1\17\3\5\1\20\4\5\1\21\2\5\1\22"+
    "\12\5\1\7\1\23\1\24\1\23\1\6\1\24\1\25"+
    "\1\7\1\23\1\6\1\26\1\7\1\6\37\7\1\27"+
    "\1\30\1\24\1\30\1\31\1\24\2\27\1\30\1\31"+
    "\1\27\1\32\1\6\37\27\2\33\1\34\1\33\2\34"+
    "\3\33\1\34\2\33\1\34\37\33\2\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\37\5\2\0\1\6"+
    "\1\0\2\6\3\0\1\6\2\0\1\6\113\0\2\5"+
    "\1\6\1\5\2\6\1\0\2\5\1\10\1\0\1\35"+
    "\1\6\37\5\14\0\1\5\37\0\2\12\1\0\1\5"+
    "\3\36\3\12\1\36\1\37\1\36\37\12\2\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\35\1\0\1\5\1\40"+
    "\37\5\1\0\1\5\3\0\3\5\1\0\1\35\1\0"+
    "\3\5\1\41\35\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\35\1\0\25\5\1\42\13\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\6\5\1\43\32\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\35\1\0\15\5\1\44"+
    "\23\5\1\0\1\5\3\0\3\5\1\0\1\35\1\0"+
    "\13\5\1\45\25\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\35\1\0\3\5\1\46\35\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\10\5\1\47\26\5\1\0"+
    "\5\50\2\0\2\50\2\0\1\50\40\0\1\50\1\24"+
    "\1\50\2\24\2\0\1\50\1\24\2\0\1\24\46\0"+
    "\3\51\5\0\35\51\2\27\1\0\2\27\1\0\5\27"+
    "\1\52\41\27\1\30\1\50\2\30\1\50\2\27\2\30"+
    "\1\27\1\52\1\30\41\27\1\6\1\27\1\31\1\6"+
    "\3\27\1\31\1\27\1\52\1\31\42\27\1\53\50\27"+
    "\54\33\2\36\2\0\52\36\2\0\10\36\1\12\37\36"+
    "\2\5\1\0\1\5\3\0\3\5\1\0\1\35\1\0"+
    "\1\5\1\54\37\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\35\1\0\4\5\1\55\34\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\2\5\1\56\36\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\35\1\0\21\5\1\57"+
    "\4\5\1\60\12\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\35\1\0\2\5\1\61\36\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\11\5\1\62\13\5\1\63"+
    "\13\5\1\0\1\5\3\0\3\5\1\0\1\35\1\0"+
    "\21\5\1\64\10\5\1\65\6\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\25\5\1\66\11\5\5\27"+
    "\1\0\5\27\1\52\40\27\1\5\1\67\1\70\1\71"+
    "\1\0\1\70\1\0\1\5\1\67\1\5\1\0\1\35"+
    "\1\0\41\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\5\5\1\72\33\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\31\5\1\73\7\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\31\5\1\74\7\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\11\5"+
    "\1\75\27\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\7\5\1\76\31\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\6\5\1\77\32\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\13\5\1\100\25\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\32\5"+
    "\1\101\6\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\13\5\1\102\25\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\17\5\1\103\21\5\1\70\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\41\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\6\5\1\104\32\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\25\5"+
    "\1\105\13\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\10\5\1\106\30\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\25\5\1\107\13\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\16\5\1\110\22\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\2\5"+
    "\1\111\36\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\6\5\1\112\32\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\13\5\1\113\25\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\11\5\1\114\27\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\10\5"+
    "\1\115\30\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\7\5\1\74\31\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\34\5\1\116\4\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\11\5\1\117\27\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\11\5"+
    "\1\120\27\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\17\5\1\121\21\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\13\5\1\122\25\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\2\5\1\123\36\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\11\5"+
    "\1\62\27\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\6\5\1\124\32\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\11\5\1\125\27\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\10\5\1\126\30\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\12\5"+
    "\1\127\26\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\27\5\1\130\11\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\10\5\1\131\30\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\33\5\1\132\5\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\36\5"+
    "\1\133\2\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\21\5\1\134\17\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\14\5\1\126\6\5\1\135\15\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\5\5"+
    "\1\136\33\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\30\5\1\137\10\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\17\5\1\140\1\141\20\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\35\1\0\21\5\1\142"+
    "\17\5\1\0\1\5\3\0\3\5\1\0\1\35\1\0"+
    "\6\5\1\143\32\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\35\1\0\34\5\1\144\4\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\6\5\1\145\32\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\35\1\0\13\5\1\146"+
    "\25\5\1\0\1\5\3\0\3\5\1\0\1\35\1\0"+
    "\25\5\1\147\13\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\35\1\0\23\5\1\150\15\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\10\5\1\151\30\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\35\1\0\16\5\1\152"+
    "\22\5\1\0\1\5\3\0\3\5\1\0\1\35\1\0"+
    "\26\5\1\153\12\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\35\1\0\35\5\1\154\3\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\7\5\1\155\31\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\35\1\0\14\5\1\126"+
    "\24\5\1\0\1\5\3\0\3\5\1\0\1\35\1\0"+
    "\13\5\1\156\25\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\35\1\0\16\5\1\157\22\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\5\5\1\160\33\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\35\1\0\4\5\1\146"+
    "\34\5\1\0\1\5\3\0\3\5\1\0\1\35\1\0"+
    "\11\5\1\161\27\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\35\1\0\3\5\1\162\35\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\13\5\1\163\25\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\35\1\0\24\5\1\146"+
    "\14\5\1\0\1\5\3\0\3\5\1\0\1\35\1\0"+
    "\21\5\1\164\17\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\35\1\0\10\5\1\165\30\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\25\5\1\166\13\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\35\1\0\21\5\1\167"+
    "\17\5\1\0\1\5\3\0\3\5\1\0\1\35\1\0"+
    "\10\5\1\170\30\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\35\1\0\2\5\1\171\36\5\1\0\1\5\3\0"+
    "\3\5\1\0\1\35\1\0\21\5\1\172\17\5\1\0"+
    "\1\5\3\0\3\5\1\0\1\35\1\0\11\5\1\173"+
    "\27\5\1\0\1\5\3\0\2\5\1\174\1\0\1\35"+
    "\1\0\41\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\11\5\1\126\27\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\13\5\1\175\25\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\17\5\1\176\21\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\6\5"+
    "\1\177\32\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\10\5\1\200\30\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\6\5\1\201\32\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\10\5\1\202\30\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\10\5"+
    "\1\146\30\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\11\5\1\203\27\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\3\5\1\204\35\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\21\5\1\205\17\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\14\5"+
    "\1\206\24\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\21\5\1\146\17\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\13\5\1\207\25\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\6\5\1\210\32\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\22\5"+
    "\1\211\16\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\3\5\1\212\35\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\3\5\1\213\35\5\1\0\1\5"+
    "\3\0\3\5\1\0\1\35\1\0\21\5\1\126\17\5"+
    "\1\0\1\5\3\0\3\5\1\0\1\35\1\0\17\5"+
    "\1\214\21\5\1\0\1\5\3\0\3\5\1\0\1\35"+
    "\1\0\16\5\1\215\22\5\1\0\1\5\3\0\3\5"+
    "\1\0\1\35\1\0\7\5\1\177\27\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5808];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\1\1\11\15\1\1\11\7\1\1\0\14\1"+
    "\1\0\15\1\1\11\125\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NativeDefinitionsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NativeDefinitionsTypes.CODE_CHARS;
            } 
            // fall through
          case 12: break;
          case 2: 
            { yybegin(WAITING_PLATFORM); return NativeDefinitionsTypes.KEY_UNKNOWN;
            } 
            // fall through
          case 13: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 14: break;
          case 4: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 15: break;
          case 5: 
            { yybegin(WAITING_VALUE); return NativeDefinitionsTypes.SEPARATOR;
            } 
            // fall through
          case 16: break;
          case 6: 
            { yybegin(YYINITIAL); return NativeDefinitionsTypes.VALUE;
            } 
            // fall through
          case 17: break;
          case 7: 
            { return NativeDefinitionsTypes.COMMENT;
            } 
            // fall through
          case 18: break;
          case 8: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 19: break;
          case 9: 
            { return NativeDefinitionsTypes.PLATFORM;
            } 
            // fall through
          case 20: break;
          case 10: 
            { yybegin(CODE_END); return NativeDefinitionsTypes.DELIM;
            } 
            // fall through
          case 21: break;
          case 11: 
            { yybegin(WAITING_PLATFORM); return NativeDefinitionsTypes.KEY_KNOWN;
            } 
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
