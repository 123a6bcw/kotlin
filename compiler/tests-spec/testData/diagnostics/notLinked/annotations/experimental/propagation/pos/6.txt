package

package org {

    package org.jetbrains {

        package org.jetbrains.kotlin {
            public fun main(): kotlin.Unit

            public interface A {
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                @org.jetbrains.kotlin.ExperimentalAPI public abstract operator fun getValue(/*0*/ x: kotlin.Nothing?, /*1*/ y: kotlin.reflect.KProperty<*>): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }

            @kotlin.Experimental(level = Level.WARNING) @kotlin.annotation.Target(allowedTargets = {AnnotationTarget.FUNCTION}) public final annotation class ExperimentalAPI : kotlin.Annotation {
                public constructor ExperimentalAPI()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }

            public object L : org.jetbrains.kotlin.A {
                private constructor L()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun getValue(/*0*/ x: kotlin.Nothing?, /*1*/ y: kotlin.reflect.KProperty<*>): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }

            public object P : org.jetbrains.kotlin.A {
                private constructor P()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun getValue(/*0*/ x: kotlin.Nothing?, /*1*/ y: kotlin.reflect.KProperty<*>): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }
    }
}
