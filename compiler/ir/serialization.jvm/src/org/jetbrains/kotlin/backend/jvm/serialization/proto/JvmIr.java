// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.jvm/src/JvmIr.proto

package org.jetbrains.kotlin.backend.jvm.serialization.proto;

public final class JvmIr {
  private JvmIr() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
  }
  public interface UniqIdInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int64 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>required int64 id = 1;</code>
     */
    long getId();

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevel_fq_name = 2;</code>
     */
    boolean hasToplevelFqName();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevel_fq_name = 2;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.FqName getToplevelFqName();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo}
   */
  public static final class UniqIdInfo extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo)
      UniqIdInfoOrBuilder {
    // Use UniqIdInfo.newBuilder() to construct.
    private UniqIdInfo(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private UniqIdInfo(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final UniqIdInfo defaultInstance;
    public static UniqIdInfo getDefaultInstance() {
      return defaultInstance;
    }

    public UniqIdInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private UniqIdInfo(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt64();
              break;
            }
            case 18: {
              org.jetbrains.kotlin.backend.common.serialization.proto.FqName.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = toplevelFqName_.toBuilder();
              }
              toplevelFqName_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.FqName.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(toplevelFqName_);
                toplevelFqName_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<UniqIdInfo> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<UniqIdInfo>() {
      public UniqIdInfo parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new UniqIdInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<UniqIdInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <code>required int64 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 id = 1;</code>
     */
    public long getId() {
      return id_;
    }

    public static final int TOPLEVEL_FQ_NAME_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevelFqName_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevel_fq_name = 2;</code>
     */
    public boolean hasToplevelFqName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevel_fq_name = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.FqName getToplevelFqName() {
      return toplevelFqName_;
    }

    private void initFields() {
      id_ = 0L;
      toplevelFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.FqName.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasToplevelFqName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getToplevelFqName().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, toplevelFqName_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt64Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, toplevelFqName_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfoOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        toplevelFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.FqName.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.toplevelFqName_ = toplevelFqName_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasToplevelFqName()) {
          mergeToplevelFqName(other.getToplevelFqName());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasToplevelFqName()) {
          
          return false;
        }
        if (!getToplevelFqName().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long id_ ;
      /**
       * <code>required int64 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 id = 1;</code>
       */
      public long getId() {
        return id_;
      }
      /**
       * <code>required int64 id = 1;</code>
       */
      public Builder setId(long value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required int64 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
        
        return this;
      }

      private org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevelFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.FqName.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevel_fq_name = 2;</code>
       */
      public boolean hasToplevelFqName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevel_fq_name = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.FqName getToplevelFqName() {
        return toplevelFqName_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevel_fq_name = 2;</code>
       */
      public Builder setToplevelFqName(org.jetbrains.kotlin.backend.common.serialization.proto.FqName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        toplevelFqName_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevel_fq_name = 2;</code>
       */
      public Builder setToplevelFqName(
          org.jetbrains.kotlin.backend.common.serialization.proto.FqName.Builder builderForValue) {
        toplevelFqName_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevel_fq_name = 2;</code>
       */
      public Builder mergeToplevelFqName(org.jetbrains.kotlin.backend.common.serialization.proto.FqName value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            toplevelFqName_ != org.jetbrains.kotlin.backend.common.serialization.proto.FqName.getDefaultInstance()) {
          toplevelFqName_ =
            org.jetbrains.kotlin.backend.common.serialization.proto.FqName.newBuilder(toplevelFqName_).mergeFrom(value).buildPartial();
        } else {
          toplevelFqName_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName toplevel_fq_name = 2;</code>
       */
      public Builder clearToplevelFqName() {
        toplevelFqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.FqName.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo)
    }

    static {
      defaultInstance = new UniqIdInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo)
  }

  public interface UniqIdTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo> 
        getInfosList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo getInfos(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
     */
    int getInfosCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable}
   */
  public static final class UniqIdTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable)
      UniqIdTableOrBuilder {
    // Use UniqIdTable.newBuilder() to construct.
    private UniqIdTable(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private UniqIdTable(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final UniqIdTable defaultInstance;
    public static UniqIdTable getDefaultInstance() {
      return defaultInstance;
    }

    public UniqIdTable getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private UniqIdTable(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                infos_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              infos_.add(input.readMessage(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          infos_ = java.util.Collections.unmodifiableList(infos_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<UniqIdTable> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<UniqIdTable>() {
      public UniqIdTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new UniqIdTable(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<UniqIdTable> getParserForType() {
      return PARSER;
    }

    public static final int INFOS_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo> infos_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo> getInfosList() {
      return infos_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfoOrBuilder> 
        getInfosOrBuilderList() {
      return infos_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
     */
    public int getInfosCount() {
      return infos_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo getInfos(int index) {
      return infos_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfoOrBuilder getInfosOrBuilder(
        int index) {
      return infos_.get(index);
    }

    private void initFields() {
      infos_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getInfosCount(); i++) {
        if (!getInfos(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < infos_.size(); i++) {
        output.writeMessage(1, infos_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < infos_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, infos_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTableOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        infos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          infos_ = java.util.Collections.unmodifiableList(infos_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.infos_ = infos_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.getDefaultInstance()) return this;
        if (!other.infos_.isEmpty()) {
          if (infos_.isEmpty()) {
            infos_ = other.infos_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureInfosIsMutable();
            infos_.addAll(other.infos_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getInfosCount(); i++) {
          if (!getInfos(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo> infos_ =
        java.util.Collections.emptyList();
      private void ensureInfosIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          infos_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo>(infos_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo> getInfosList() {
        return java.util.Collections.unmodifiableList(infos_);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public int getInfosCount() {
        return infos_.size();
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo getInfos(int index) {
        return infos_.get(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public Builder setInfos(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInfosIsMutable();
        infos_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public Builder setInfos(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo.Builder builderForValue) {
        ensureInfosIsMutable();
        infos_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public Builder addInfos(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInfosIsMutable();
        infos_.add(value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public Builder addInfos(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInfosIsMutable();
        infos_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public Builder addInfos(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo.Builder builderForValue) {
        ensureInfosIsMutable();
        infos_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public Builder addInfos(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo.Builder builderForValue) {
        ensureInfosIsMutable();
        infos_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public Builder addAllInfos(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdInfo> values) {
        ensureInfosIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, infos_);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public Builder clearInfos() {
        infos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdInfo infos = 1;</code>
       */
      public Builder removeInfos(int index) {
        ensureInfosIsMutable();
        infos_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable)
    }

    static {
      defaultInstance = new UniqIdTable(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable)
  }

  public interface XStatementOrExpressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    boolean hasStatement();
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement();

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    boolean hasExpression();
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression}
   */
  public static final class XStatementOrExpression extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
      XStatementOrExpressionOrBuilder {
    // Use XStatementOrExpression.newBuilder() to construct.
    private XStatementOrExpression(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private XStatementOrExpression(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final XStatementOrExpression defaultInstance;
    public static XStatementOrExpression getDefaultInstance() {
      return defaultInstance;
    }

    public XStatementOrExpression getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private XStatementOrExpression(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder subBuilder = null;
              if (kindCase_ == 1) {
                subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_).toBuilder();
              }
              kind_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_);
                kind_ = subBuilder.buildPartial();
              }
              kindCase_ = 1;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder subBuilder = null;
              if (kindCase_ == 2) {
                subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_).toBuilder();
              }
              kind_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_);
                kind_ = subBuilder.buildPartial();
              }
              kindCase_ = 2;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<XStatementOrExpression> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<XStatementOrExpression>() {
      public XStatementOrExpression parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new XStatementOrExpression(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<XStatementOrExpression> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int kindCase_ = 0;
    private java.lang.Object kind_;
    public enum KindCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      STATEMENT(1),
      EXPRESSION(2),
      KIND_NOT_SET(0);
      private int value = 0;
      private KindCase(int value) {
        this.value = value;
      }
      public static KindCase valueOf(int value) {
        switch (value) {
          case 1: return STATEMENT;
          case 2: return EXPRESSION;
          case 0: return KIND_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public KindCase
    getKindCase() {
      return KindCase.valueOf(
          kindCase_);
    }

    public static final int STATEMENT_FIELD_NUMBER = 1;
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    public boolean hasStatement() {
      return kindCase_ == 1;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement() {
      if (kindCase_ == 1) {
         return (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    public boolean hasExpression() {
      return kindCase_ == 2;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
      if (kindCase_ == 2) {
         return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasStatement()) {
        if (!getStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (kindCase_ == 1) {
        output.writeMessage(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_);
      }
      if (kindCase_ == 2) {
        output.writeMessage(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (kindCase_ == 1) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_);
      }
      if (kindCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        kindCase_ = 0;
        kind_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (kindCase_ == 1) {
          result.kind_ = kind_;
        }
        if (kindCase_ == 2) {
          result.kind_ = kind_;
        }
        result.bitField0_ = to_bitField0_;
        result.kindCase_ = kindCase_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.getDefaultInstance()) return this;
        switch (other.getKindCase()) {
          case STATEMENT: {
            mergeStatement(other.getStatement());
            break;
          }
          case EXPRESSION: {
            mergeExpression(other.getExpression());
            break;
          }
          case KIND_NOT_SET: {
            break;
          }
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (hasStatement()) {
          if (!getStatement().isInitialized()) {
            
            return false;
          }
        }
        if (hasExpression()) {
          if (!getExpression().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int kindCase_ = 0;
      private java.lang.Object kind_;
      public KindCase
          getKindCase() {
        return KindCase.valueOf(
            kindCase_);
      }

      public Builder clearKind() {
        kindCase_ = 0;
        kind_ = null;
        return this;
      }

      private int bitField0_;

      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public boolean hasStatement() {
        return kindCase_ == 1;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement() {
        if (kindCase_ == 1) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder setStatement(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
        if (value == null) {
          throw new NullPointerException();
        }
        kind_ = value;

        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder setStatement(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder builderForValue) {
        kind_ = builderForValue.build();

        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder mergeStatement(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
        if (kindCase_ == 1 &&
            kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance()) {
          kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_)
              .mergeFrom(value).buildPartial();
        } else {
          kind_ = value;
        }

        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder clearStatement() {
        if (kindCase_ == 1) {
          kindCase_ = 0;
          kind_ = null;
          
        }
        return this;
      }

      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public boolean hasExpression() {
        return kindCase_ == 2;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
        if (kindCase_ == 2) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
        if (value == null) {
          throw new NullPointerException();
        }
        kind_ = value;

        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
        kind_ = builderForValue.build();

        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
        if (kindCase_ == 2 &&
            kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
          kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_)
              .mergeFrom(value).buildPartial();
        } else {
          kind_ = value;
        }

        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder clearExpression() {
        if (kindCase_ == 2) {
          kindCase_ = 0;
          kind_ = null;
          
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
    }

    static {
      defaultInstance = new XStatementOrExpression(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
  }

  public interface StatementsAndExpressionsTableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> 
        getStatemensAndExpressionsList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getStatemensAndExpressions(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
     */
    int getStatemensAndExpressionsCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable}
   */
  public static final class StatementsAndExpressionsTable extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable)
      StatementsAndExpressionsTableOrBuilder {
    // Use StatementsAndExpressionsTable.newBuilder() to construct.
    private StatementsAndExpressionsTable(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StatementsAndExpressionsTable(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final StatementsAndExpressionsTable defaultInstance;
    public static StatementsAndExpressionsTable getDefaultInstance() {
      return defaultInstance;
    }

    public StatementsAndExpressionsTable getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private StatementsAndExpressionsTable(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                statemensAndExpressions_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression>();
                mutable_bitField0_ |= 0x00000001;
              }
              statemensAndExpressions_.add(input.readMessage(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          statemensAndExpressions_ = java.util.Collections.unmodifiableList(statemensAndExpressions_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<StatementsAndExpressionsTable> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<StatementsAndExpressionsTable>() {
      public StatementsAndExpressionsTable parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new StatementsAndExpressionsTable(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<StatementsAndExpressionsTable> getParserForType() {
      return PARSER;
    }

    public static final int STATEMENS_AND_EXPRESSIONS_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> statemensAndExpressions_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> getStatemensAndExpressionsList() {
      return statemensAndExpressions_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder> 
        getStatemensAndExpressionsOrBuilderList() {
      return statemensAndExpressions_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
     */
    public int getStatemensAndExpressionsCount() {
      return statemensAndExpressions_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getStatemensAndExpressions(int index) {
      return statemensAndExpressions_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder getStatemensAndExpressionsOrBuilder(
        int index) {
      return statemensAndExpressions_.get(index);
    }

    private void initFields() {
      statemensAndExpressions_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getStatemensAndExpressionsCount(); i++) {
        if (!getStatemensAndExpressions(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < statemensAndExpressions_.size(); i++) {
        output.writeMessage(1, statemensAndExpressions_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < statemensAndExpressions_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, statemensAndExpressions_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTableOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        statemensAndExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          statemensAndExpressions_ = java.util.Collections.unmodifiableList(statemensAndExpressions_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.statemensAndExpressions_ = statemensAndExpressions_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.getDefaultInstance()) return this;
        if (!other.statemensAndExpressions_.isEmpty()) {
          if (statemensAndExpressions_.isEmpty()) {
            statemensAndExpressions_ = other.statemensAndExpressions_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureStatemensAndExpressionsIsMutable();
            statemensAndExpressions_.addAll(other.statemensAndExpressions_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getStatemensAndExpressionsCount(); i++) {
          if (!getStatemensAndExpressions(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> statemensAndExpressions_ =
        java.util.Collections.emptyList();
      private void ensureStatemensAndExpressionsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          statemensAndExpressions_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression>(statemensAndExpressions_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> getStatemensAndExpressionsList() {
        return java.util.Collections.unmodifiableList(statemensAndExpressions_);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public int getStatemensAndExpressionsCount() {
        return statemensAndExpressions_.size();
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getStatemensAndExpressions(int index) {
        return statemensAndExpressions_.get(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public Builder setStatemensAndExpressions(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStatemensAndExpressionsIsMutable();
        statemensAndExpressions_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public Builder setStatemensAndExpressions(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder builderForValue) {
        ensureStatemensAndExpressionsIsMutable();
        statemensAndExpressions_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public Builder addStatemensAndExpressions(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStatemensAndExpressionsIsMutable();
        statemensAndExpressions_.add(value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public Builder addStatemensAndExpressions(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStatemensAndExpressionsIsMutable();
        statemensAndExpressions_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public Builder addStatemensAndExpressions(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder builderForValue) {
        ensureStatemensAndExpressionsIsMutable();
        statemensAndExpressions_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public Builder addStatemensAndExpressions(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.Builder builderForValue) {
        ensureStatemensAndExpressionsIsMutable();
        statemensAndExpressions_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public Builder addAllStatemensAndExpressions(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression> values) {
        ensureStatemensAndExpressionsIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, statemensAndExpressions_);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public Builder clearStatemensAndExpressions() {
        statemensAndExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression statemens_and_expressions = 1;</code>
       */
      public Builder removeStatemensAndExpressions(int index) {
        ensureStatemensAndExpressionsIsMutable();
        statemensAndExpressions_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable)
    }

    static {
      defaultInstance = new StatementsAndExpressionsTable(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable)
  }

  public interface ExternalReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int64 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>required int64 id = 1;</code>
     */
    long getId();

    /**
     * <code>required int32 index = 2;</code>
     *
     * <pre>
     * index into the modules table of ExternalRefs 
     * </pre>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 2;</code>
     *
     * <pre>
     * index into the modules table of ExternalRefs 
     * </pre>
     */
    int getIndex();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference}
   */
  public static final class ExternalReference extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference)
      ExternalReferenceOrBuilder {
    // Use ExternalReference.newBuilder() to construct.
    private ExternalReference(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ExternalReference(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final ExternalReference defaultInstance;
    public static ExternalReference getDefaultInstance() {
      return defaultInstance;
    }

    public ExternalReference getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private ExternalReference(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              index_ = input.readInt32();
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<ExternalReference> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<ExternalReference>() {
      public ExternalReference parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new ExternalReference(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ExternalReference> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private long id_;
    /**
     * <code>required int64 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 id = 1;</code>
     */
    public long getId() {
      return id_;
    }

    public static final int INDEX_FIELD_NUMBER = 2;
    private int index_;
    /**
     * <code>required int32 index = 2;</code>
     *
     * <pre>
     * index into the modules table of ExternalRefs 
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 index = 2;</code>
     *
     * <pre>
     * index into the modules table of ExternalRefs 
     * </pre>
     */
    public int getIndex() {
      return index_;
    }

    private void initFields() {
      id_ = 0L;
      index_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, index_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt64Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, index_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReferenceOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.index_ = index_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long id_ ;
      /**
       * <code>required int64 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 id = 1;</code>
       */
      public long getId() {
        return id_;
      }
      /**
       * <code>required int64 id = 1;</code>
       */
      public Builder setId(long value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required int64 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
        
        return this;
      }

      private int index_ ;
      /**
       * <code>required int32 index = 2;</code>
       *
       * <pre>
       * index into the modules table of ExternalRefs 
       * </pre>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 index = 2;</code>
       *
       * <pre>
       * index into the modules table of ExternalRefs 
       * </pre>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 2;</code>
       *
       * <pre>
       * index into the modules table of ExternalRefs 
       * </pre>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000002;
        index_ = value;
        
        return this;
      }
      /**
       * <code>required int32 index = 2;</code>
       *
       * <pre>
       * index into the modules table of ExternalRefs 
       * </pre>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        index_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference)
    }

    static {
      defaultInstance = new ExternalReference(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference)
  }

  public interface JvmExternalPackageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName fq_name = 1;</code>
     */
    boolean hasFqName();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName fq_name = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.FqName getFqName();

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 2;</code>
     */
    boolean hasDeclarationContainer();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 2;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer getDeclarationContainer();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage}
   */
  public static final class JvmExternalPackage extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage)
      JvmExternalPackageOrBuilder {
    // Use JvmExternalPackage.newBuilder() to construct.
    private JvmExternalPackage(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JvmExternalPackage(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final JvmExternalPackage defaultInstance;
    public static JvmExternalPackage getDefaultInstance() {
      return defaultInstance;
    }

    public JvmExternalPackage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private JvmExternalPackage(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.backend.common.serialization.proto.FqName.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = fqName_.toBuilder();
              }
              fqName_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.FqName.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fqName_);
                fqName_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = declarationContainer_.toBuilder();
              }
              declarationContainer_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(declarationContainer_);
                declarationContainer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<JvmExternalPackage> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<JvmExternalPackage>() {
      public JvmExternalPackage parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new JvmExternalPackage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JvmExternalPackage> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FQ_NAME_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.backend.common.serialization.proto.FqName fqName_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName fq_name = 1;</code>
     */
    public boolean hasFqName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName fq_name = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.FqName getFqName() {
      return fqName_;
    }

    public static final int DECLARATION_CONTAINER_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declarationContainer_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 2;</code>
     */
    public boolean hasDeclarationContainer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer getDeclarationContainer() {
      return declarationContainer_;
    }

    private void initFields() {
      fqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.FqName.getDefaultInstance();
      declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFqName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDeclarationContainer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getFqName().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getDeclarationContainer().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, fqName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, declarationContainer_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, fqName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, declarationContainer_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackageOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        fqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.FqName.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.fqName_ = fqName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.declarationContainer_ = declarationContainer_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage.getDefaultInstance()) return this;
        if (other.hasFqName()) {
          mergeFqName(other.getFqName());
        }
        if (other.hasDeclarationContainer()) {
          mergeDeclarationContainer(other.getDeclarationContainer());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFqName()) {
          
          return false;
        }
        if (!hasDeclarationContainer()) {
          
          return false;
        }
        if (!getFqName().isInitialized()) {
          
          return false;
        }
        if (!getDeclarationContainer().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.backend.common.serialization.proto.FqName fqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.FqName.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName fq_name = 1;</code>
       */
      public boolean hasFqName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName fq_name = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.FqName getFqName() {
        return fqName_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName fq_name = 1;</code>
       */
      public Builder setFqName(org.jetbrains.kotlin.backend.common.serialization.proto.FqName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        fqName_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName fq_name = 1;</code>
       */
      public Builder setFqName(
          org.jetbrains.kotlin.backend.common.serialization.proto.FqName.Builder builderForValue) {
        fqName_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName fq_name = 1;</code>
       */
      public Builder mergeFqName(org.jetbrains.kotlin.backend.common.serialization.proto.FqName value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            fqName_ != org.jetbrains.kotlin.backend.common.serialization.proto.FqName.getDefaultInstance()) {
          fqName_ =
            org.jetbrains.kotlin.backend.common.serialization.proto.FqName.newBuilder(fqName_).mergeFrom(value).buildPartial();
        } else {
          fqName_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FqName fq_name = 1;</code>
       */
      public Builder clearFqName() {
        fqName_ = org.jetbrains.kotlin.backend.common.serialization.proto.FqName.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 2;</code>
       */
      public boolean hasDeclarationContainer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer getDeclarationContainer() {
        return declarationContainer_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 2;</code>
       */
      public Builder setDeclarationContainer(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer value) {
        if (value == null) {
          throw new NullPointerException();
        }
        declarationContainer_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 2;</code>
       */
      public Builder setDeclarationContainer(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.Builder builderForValue) {
        declarationContainer_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 2;</code>
       */
      public Builder mergeDeclarationContainer(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            declarationContainer_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance()) {
          declarationContainer_ =
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.newBuilder(declarationContainer_).mergeFrom(value).buildPartial();
        } else {
          declarationContainer_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 2;</code>
       */
      public Builder clearDeclarationContainer() {
        declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage)
    }

    static {
      defaultInstance = new JvmExternalPackage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage)
  }

  public interface ExternalRefsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage> 
        getPackagesList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage getPackages(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
     */
    int getPackagesCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference> 
        getReferencesList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference getReferences(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
     */
    int getReferencesCount();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs}
   */
  public static final class ExternalRefs extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs)
      ExternalRefsOrBuilder {
    // Use ExternalRefs.newBuilder() to construct.
    private ExternalRefs(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ExternalRefs(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final ExternalRefs defaultInstance;
    public static ExternalRefs getDefaultInstance() {
      return defaultInstance;
    }

    public ExternalRefs getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private ExternalRefs(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                packages_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage>();
                mutable_bitField0_ |= 0x00000001;
              }
              packages_.add(input.readMessage(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                references_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference>();
                mutable_bitField0_ |= 0x00000002;
              }
              references_.add(input.readMessage(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          packages_ = java.util.Collections.unmodifiableList(packages_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          references_ = java.util.Collections.unmodifiableList(references_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<ExternalRefs> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<ExternalRefs>() {
      public ExternalRefs parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new ExternalRefs(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ExternalRefs> getParserForType() {
      return PARSER;
    }

    public static final int PACKAGES_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage> packages_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage> getPackagesList() {
      return packages_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackageOrBuilder> 
        getPackagesOrBuilderList() {
      return packages_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
     */
    public int getPackagesCount() {
      return packages_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage getPackages(int index) {
      return packages_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackageOrBuilder getPackagesOrBuilder(
        int index) {
      return packages_.get(index);
    }

    public static final int REFERENCES_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference> references_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference> getReferencesList() {
      return references_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReferenceOrBuilder> 
        getReferencesOrBuilderList() {
      return references_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
     */
    public int getReferencesCount() {
      return references_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference getReferences(int index) {
      return references_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReferenceOrBuilder getReferencesOrBuilder(
        int index) {
      return references_.get(index);
    }

    private void initFields() {
      packages_ = java.util.Collections.emptyList();
      references_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getPackagesCount(); i++) {
        if (!getPackages(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getReferencesCount(); i++) {
        if (!getReferences(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < packages_.size(); i++) {
        output.writeMessage(1, packages_.get(i));
      }
      for (int i = 0; i < references_.size(); i++) {
        output.writeMessage(2, references_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < packages_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, packages_.get(i));
      }
      for (int i = 0; i < references_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, references_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefsOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        packages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        references_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          packages_ = java.util.Collections.unmodifiableList(packages_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.packages_ = packages_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          references_ = java.util.Collections.unmodifiableList(references_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.references_ = references_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.getDefaultInstance()) return this;
        if (!other.packages_.isEmpty()) {
          if (packages_.isEmpty()) {
            packages_ = other.packages_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePackagesIsMutable();
            packages_.addAll(other.packages_);
          }
          
        }
        if (!other.references_.isEmpty()) {
          if (references_.isEmpty()) {
            references_ = other.references_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureReferencesIsMutable();
            references_.addAll(other.references_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getPackagesCount(); i++) {
          if (!getPackages(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getReferencesCount(); i++) {
          if (!getReferences(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage> packages_ =
        java.util.Collections.emptyList();
      private void ensurePackagesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          packages_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage>(packages_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage> getPackagesList() {
        return java.util.Collections.unmodifiableList(packages_);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public int getPackagesCount() {
        return packages_.size();
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage getPackages(int index) {
        return packages_.get(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public Builder setPackages(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePackagesIsMutable();
        packages_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public Builder setPackages(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage.Builder builderForValue) {
        ensurePackagesIsMutable();
        packages_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public Builder addPackages(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePackagesIsMutable();
        packages_.add(value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public Builder addPackages(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePackagesIsMutable();
        packages_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public Builder addPackages(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage.Builder builderForValue) {
        ensurePackagesIsMutable();
        packages_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public Builder addPackages(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage.Builder builderForValue) {
        ensurePackagesIsMutable();
        packages_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public Builder addAllPackages(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmExternalPackage> values) {
        ensurePackagesIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, packages_);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public Builder clearPackages() {
        packages_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmExternalPackage packages = 1;</code>
       */
      public Builder removePackages(int index) {
        ensurePackagesIsMutable();
        packages_.remove(index);

        return this;
      }

      private java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference> references_ =
        java.util.Collections.emptyList();
      private void ensureReferencesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          references_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference>(references_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference> getReferencesList() {
        return java.util.Collections.unmodifiableList(references_);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public int getReferencesCount() {
        return references_.size();
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference getReferences(int index) {
        return references_.get(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public Builder setReferences(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesIsMutable();
        references_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public Builder setReferences(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference.Builder builderForValue) {
        ensureReferencesIsMutable();
        references_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public Builder addReferences(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesIsMutable();
        references_.add(value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public Builder addReferences(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureReferencesIsMutable();
        references_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public Builder addReferences(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference.Builder builderForValue) {
        ensureReferencesIsMutable();
        references_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public Builder addReferences(
          int index, org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference.Builder builderForValue) {
        ensureReferencesIsMutable();
        references_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public Builder addAllReferences(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalReference> values) {
        ensureReferencesIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, references_);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public Builder clearReferences() {
        references_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalReference references = 2;</code>
       */
      public Builder removeReferences(int index) {
        ensureReferencesIsMutable();
        references_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs)
    }

    static {
      defaultInstance = new ExternalRefs(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs)
  }

  public interface AuxTablesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbol_table = 1;</code>
     */
    boolean hasSymbolTable();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbol_table = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable getSymbolTable();

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable type_table = 2;</code>
     */
    boolean hasTypeTable();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable type_table = 2;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable getTypeTable();

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.StringTable string_table = 3;</code>
     */
    boolean hasStringTable();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.StringTable string_table = 3;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.StringTable getStringTable();

    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable statements_and_expressions_table = 4;</code>
     */
    boolean hasStatementsAndExpressionsTable();
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable statements_and_expressions_table = 4;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable getStatementsAndExpressionsTable();

    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs external_refs = 5;</code>
     */
    boolean hasExternalRefs();
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs external_refs = 5;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs getExternalRefs();

    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable uniq_id_table = 6;</code>
     */
    boolean hasUniqIdTable();
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable uniq_id_table = 6;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable getUniqIdTable();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables}
   */
  public static final class AuxTables extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables)
      AuxTablesOrBuilder {
    // Use AuxTables.newBuilder() to construct.
    private AuxTables(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AuxTables(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final AuxTables defaultInstance;
    public static AuxTables getDefaultInstance() {
      return defaultInstance;
    }

    public AuxTables getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private AuxTables(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = symbolTable_.toBuilder();
              }
              symbolTable_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(symbolTable_);
                symbolTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = typeTable_.toBuilder();
              }
              typeTable_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(typeTable_);
                typeTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.backend.common.serialization.proto.StringTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = stringTable_.toBuilder();
              }
              stringTable_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.StringTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stringTable_);
                stringTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = statementsAndExpressionsTable_.toBuilder();
              }
              statementsAndExpressionsTable_ = input.readMessage(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(statementsAndExpressionsTable_);
                statementsAndExpressionsTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = externalRefs_.toBuilder();
              }
              externalRefs_ = input.readMessage(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(externalRefs_);
                externalRefs_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = uniqIdTable_.toBuilder();
              }
              uniqIdTable_ = input.readMessage(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(uniqIdTable_);
                uniqIdTable_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<AuxTables> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<AuxTables>() {
      public AuxTables parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new AuxTables(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<AuxTables> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SYMBOL_TABLE_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbolTable_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbol_table = 1;</code>
     */
    public boolean hasSymbolTable() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbol_table = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable getSymbolTable() {
      return symbolTable_;
    }

    public static final int TYPE_TABLE_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable typeTable_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable type_table = 2;</code>
     */
    public boolean hasTypeTable() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable type_table = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable getTypeTable() {
      return typeTable_;
    }

    public static final int STRING_TABLE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.backend.common.serialization.proto.StringTable stringTable_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.StringTable string_table = 3;</code>
     */
    public boolean hasStringTable() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.StringTable string_table = 3;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.StringTable getStringTable() {
      return stringTable_;
    }

    public static final int STATEMENTS_AND_EXPRESSIONS_TABLE_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable statementsAndExpressionsTable_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable statements_and_expressions_table = 4;</code>
     */
    public boolean hasStatementsAndExpressionsTable() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable statements_and_expressions_table = 4;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable getStatementsAndExpressionsTable() {
      return statementsAndExpressionsTable_;
    }

    public static final int EXTERNAL_REFS_FIELD_NUMBER = 5;
    private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs externalRefs_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs external_refs = 5;</code>
     */
    public boolean hasExternalRefs() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs external_refs = 5;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs getExternalRefs() {
      return externalRefs_;
    }

    public static final int UNIQ_ID_TABLE_FIELD_NUMBER = 6;
    private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable uniqIdTable_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable uniq_id_table = 6;</code>
     */
    public boolean hasUniqIdTable() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable uniq_id_table = 6;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable getUniqIdTable() {
      return uniqIdTable_;
    }

    private void initFields() {
      symbolTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable.getDefaultInstance();
      typeTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable.getDefaultInstance();
      stringTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.StringTable.getDefaultInstance();
      statementsAndExpressionsTable_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.getDefaultInstance();
      externalRefs_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.getDefaultInstance();
      uniqIdTable_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSymbolTable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTypeTable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStringTable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStatementsAndExpressionsTable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasExternalRefs()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUniqIdTable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getSymbolTable().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTypeTable().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getStatementsAndExpressionsTable().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getExternalRefs().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getUniqIdTable().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, symbolTable_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, typeTable_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, stringTable_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, statementsAndExpressionsTable_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, externalRefs_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, uniqIdTable_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, symbolTable_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, typeTable_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, stringTable_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, statementsAndExpressionsTable_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(5, externalRefs_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(6, uniqIdTable_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTablesOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        symbolTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        typeTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        stringTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.StringTable.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        statementsAndExpressionsTable_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        externalRefs_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000010);
        uniqIdTable_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.symbolTable_ = symbolTable_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.typeTable_ = typeTable_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.stringTable_ = stringTable_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.statementsAndExpressionsTable_ = statementsAndExpressionsTable_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.externalRefs_ = externalRefs_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.uniqIdTable_ = uniqIdTable_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance()) return this;
        if (other.hasSymbolTable()) {
          mergeSymbolTable(other.getSymbolTable());
        }
        if (other.hasTypeTable()) {
          mergeTypeTable(other.getTypeTable());
        }
        if (other.hasStringTable()) {
          mergeStringTable(other.getStringTable());
        }
        if (other.hasStatementsAndExpressionsTable()) {
          mergeStatementsAndExpressionsTable(other.getStatementsAndExpressionsTable());
        }
        if (other.hasExternalRefs()) {
          mergeExternalRefs(other.getExternalRefs());
        }
        if (other.hasUniqIdTable()) {
          mergeUniqIdTable(other.getUniqIdTable());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSymbolTable()) {
          
          return false;
        }
        if (!hasTypeTable()) {
          
          return false;
        }
        if (!hasStringTable()) {
          
          return false;
        }
        if (!hasStatementsAndExpressionsTable()) {
          
          return false;
        }
        if (!hasExternalRefs()) {
          
          return false;
        }
        if (!hasUniqIdTable()) {
          
          return false;
        }
        if (!getSymbolTable().isInitialized()) {
          
          return false;
        }
        if (!getTypeTable().isInitialized()) {
          
          return false;
        }
        if (!getStatementsAndExpressionsTable().isInitialized()) {
          
          return false;
        }
        if (!getExternalRefs().isInitialized()) {
          
          return false;
        }
        if (!getUniqIdTable().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbolTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbol_table = 1;</code>
       */
      public boolean hasSymbolTable() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbol_table = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable getSymbolTable() {
        return symbolTable_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbol_table = 1;</code>
       */
      public Builder setSymbolTable(org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable value) {
        if (value == null) {
          throw new NullPointerException();
        }
        symbolTable_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbol_table = 1;</code>
       */
      public Builder setSymbolTable(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable.Builder builderForValue) {
        symbolTable_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbol_table = 1;</code>
       */
      public Builder mergeSymbolTable(org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            symbolTable_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable.getDefaultInstance()) {
          symbolTable_ =
            org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable.newBuilder(symbolTable_).mergeFrom(value).buildPartial();
        } else {
          symbolTable_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable symbol_table = 1;</code>
       */
      public Builder clearSymbolTable() {
        symbolTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolTable.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      private org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable typeTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable type_table = 2;</code>
       */
      public boolean hasTypeTable() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable type_table = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable getTypeTable() {
        return typeTable_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable type_table = 2;</code>
       */
      public Builder setTypeTable(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable value) {
        if (value == null) {
          throw new NullPointerException();
        }
        typeTable_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable type_table = 2;</code>
       */
      public Builder setTypeTable(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable.Builder builderForValue) {
        typeTable_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable type_table = 2;</code>
       */
      public Builder mergeTypeTable(org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            typeTable_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable.getDefaultInstance()) {
          typeTable_ =
            org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable.newBuilder(typeTable_).mergeFrom(value).buildPartial();
        } else {
          typeTable_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable type_table = 2;</code>
       */
      public Builder clearTypeTable() {
        typeTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeTable.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      private org.jetbrains.kotlin.backend.common.serialization.proto.StringTable stringTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.StringTable.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.StringTable string_table = 3;</code>
       */
      public boolean hasStringTable() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.StringTable string_table = 3;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.StringTable getStringTable() {
        return stringTable_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.StringTable string_table = 3;</code>
       */
      public Builder setStringTable(org.jetbrains.kotlin.backend.common.serialization.proto.StringTable value) {
        if (value == null) {
          throw new NullPointerException();
        }
        stringTable_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.StringTable string_table = 3;</code>
       */
      public Builder setStringTable(
          org.jetbrains.kotlin.backend.common.serialization.proto.StringTable.Builder builderForValue) {
        stringTable_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.StringTable string_table = 3;</code>
       */
      public Builder mergeStringTable(org.jetbrains.kotlin.backend.common.serialization.proto.StringTable value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            stringTable_ != org.jetbrains.kotlin.backend.common.serialization.proto.StringTable.getDefaultInstance()) {
          stringTable_ =
            org.jetbrains.kotlin.backend.common.serialization.proto.StringTable.newBuilder(stringTable_).mergeFrom(value).buildPartial();
        } else {
          stringTable_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.StringTable string_table = 3;</code>
       */
      public Builder clearStringTable() {
        stringTable_ = org.jetbrains.kotlin.backend.common.serialization.proto.StringTable.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable statementsAndExpressionsTable_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable statements_and_expressions_table = 4;</code>
       */
      public boolean hasStatementsAndExpressionsTable() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable statements_and_expressions_table = 4;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable getStatementsAndExpressionsTable() {
        return statementsAndExpressionsTable_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable statements_and_expressions_table = 4;</code>
       */
      public Builder setStatementsAndExpressionsTable(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable value) {
        if (value == null) {
          throw new NullPointerException();
        }
        statementsAndExpressionsTable_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable statements_and_expressions_table = 4;</code>
       */
      public Builder setStatementsAndExpressionsTable(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.Builder builderForValue) {
        statementsAndExpressionsTable_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable statements_and_expressions_table = 4;</code>
       */
      public Builder mergeStatementsAndExpressionsTable(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            statementsAndExpressionsTable_ != org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.getDefaultInstance()) {
          statementsAndExpressionsTable_ =
            org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.newBuilder(statementsAndExpressionsTable_).mergeFrom(value).buildPartial();
        } else {
          statementsAndExpressionsTable_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.StatementsAndExpressionsTable statements_and_expressions_table = 4;</code>
       */
      public Builder clearStatementsAndExpressionsTable() {
        statementsAndExpressionsTable_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.StatementsAndExpressionsTable.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs externalRefs_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs external_refs = 5;</code>
       */
      public boolean hasExternalRefs() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs external_refs = 5;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs getExternalRefs() {
        return externalRefs_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs external_refs = 5;</code>
       */
      public Builder setExternalRefs(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs value) {
        if (value == null) {
          throw new NullPointerException();
        }
        externalRefs_ = value;

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs external_refs = 5;</code>
       */
      public Builder setExternalRefs(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.Builder builderForValue) {
        externalRefs_ = builderForValue.build();

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs external_refs = 5;</code>
       */
      public Builder mergeExternalRefs(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs value) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            externalRefs_ != org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.getDefaultInstance()) {
          externalRefs_ =
            org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.newBuilder(externalRefs_).mergeFrom(value).buildPartial();
        } else {
          externalRefs_ = value;
        }

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.ExternalRefs external_refs = 5;</code>
       */
      public Builder clearExternalRefs() {
        externalRefs_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ExternalRefs.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable uniqIdTable_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable uniq_id_table = 6;</code>
       */
      public boolean hasUniqIdTable() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable uniq_id_table = 6;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable getUniqIdTable() {
        return uniqIdTable_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable uniq_id_table = 6;</code>
       */
      public Builder setUniqIdTable(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable value) {
        if (value == null) {
          throw new NullPointerException();
        }
        uniqIdTable_ = value;

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable uniq_id_table = 6;</code>
       */
      public Builder setUniqIdTable(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.Builder builderForValue) {
        uniqIdTable_ = builderForValue.build();

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable uniq_id_table = 6;</code>
       */
      public Builder mergeUniqIdTable(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable value) {
        if (((bitField0_ & 0x00000020) == 0x00000020) &&
            uniqIdTable_ != org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.getDefaultInstance()) {
          uniqIdTable_ =
            org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.newBuilder(uniqIdTable_).mergeFrom(value).buildPartial();
        } else {
          uniqIdTable_ = value;
        }

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.UniqIdTable uniq_id_table = 6;</code>
       */
      public Builder clearUniqIdTable() {
        uniqIdTable_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.UniqIdTable.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables)
    }

    static {
      defaultInstance = new AuxTables(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables)
  }

  public interface JvmIrFileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 1;</code>
     */
    boolean hasDeclarationContainer();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer getDeclarationContainer();

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 2;</code>
     */
    boolean hasAnnotations();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 2;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.Annotations getAnnotations();

    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 3;</code>
     */
    boolean hasAuxTables();
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 3;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile}
   */
  public static final class JvmIrFile extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile)
      JvmIrFileOrBuilder {
    // Use JvmIrFile.newBuilder() to construct.
    private JvmIrFile(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JvmIrFile(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final JvmIrFile defaultInstance;
    public static JvmIrFile getDefaultInstance() {
      return defaultInstance;
    }

    public JvmIrFile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private JvmIrFile(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = declarationContainer_.toBuilder();
              }
              declarationContainer_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(declarationContainer_);
                declarationContainer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = annotations_.toBuilder();
              }
              annotations_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(annotations_);
                annotations_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = auxTables_.toBuilder();
              }
              auxTables_ = input.readMessage(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auxTables_);
                auxTables_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<JvmIrFile> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<JvmIrFile>() {
      public JvmIrFile parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new JvmIrFile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JvmIrFile> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DECLARATION_CONTAINER_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declarationContainer_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 1;</code>
     */
    public boolean hasDeclarationContainer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer getDeclarationContainer() {
      return declarationContainer_;
    }

    public static final int ANNOTATIONS_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 2;</code>
     */
    public boolean hasAnnotations() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.Annotations getAnnotations() {
      return annotations_;
    }

    public static final int AUX_TABLES_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables auxTables_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 3;</code>
     */
    public boolean hasAuxTables() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 3;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables() {
      return auxTables_;
    }

    private void initFields() {
      declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();
      annotations_ = org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.getDefaultInstance();
      auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasDeclarationContainer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAnnotations()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAuxTables()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getDeclarationContainer().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAnnotations().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAuxTables().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, declarationContainer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, annotations_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, auxTables_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, declarationContainer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, annotations_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(3, auxTables_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFileOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        annotations_ = org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.declarationContainer_ = declarationContainer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.annotations_ = annotations_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.auxTables_ = auxTables_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile.getDefaultInstance()) return this;
        if (other.hasDeclarationContainer()) {
          mergeDeclarationContainer(other.getDeclarationContainer());
        }
        if (other.hasAnnotations()) {
          mergeAnnotations(other.getAnnotations());
        }
        if (other.hasAuxTables()) {
          mergeAuxTables(other.getAuxTables());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDeclarationContainer()) {
          
          return false;
        }
        if (!hasAnnotations()) {
          
          return false;
        }
        if (!hasAuxTables()) {
          
          return false;
        }
        if (!getDeclarationContainer().isInitialized()) {
          
          return false;
        }
        if (!getAnnotations().isInitialized()) {
          
          return false;
        }
        if (!getAuxTables().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 1;</code>
       */
      public boolean hasDeclarationContainer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer getDeclarationContainer() {
        return declarationContainer_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 1;</code>
       */
      public Builder setDeclarationContainer(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer value) {
        if (value == null) {
          throw new NullPointerException();
        }
        declarationContainer_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 1;</code>
       */
      public Builder setDeclarationContainer(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.Builder builderForValue) {
        declarationContainer_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 1;</code>
       */
      public Builder mergeDeclarationContainer(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            declarationContainer_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance()) {
          declarationContainer_ =
            org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.newBuilder(declarationContainer_).mergeFrom(value).buildPartial();
        } else {
          declarationContainer_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer declaration_container = 1;</code>
       */
      public Builder clearDeclarationContainer() {
        declarationContainer_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationContainer.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      private org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations_ = org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 2;</code>
       */
      public boolean hasAnnotations() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.Annotations getAnnotations() {
        return annotations_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 2;</code>
       */
      public Builder setAnnotations(org.jetbrains.kotlin.backend.common.serialization.proto.Annotations value) {
        if (value == null) {
          throw new NullPointerException();
        }
        annotations_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 2;</code>
       */
      public Builder setAnnotations(
          org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.Builder builderForValue) {
        annotations_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 2;</code>
       */
      public Builder mergeAnnotations(org.jetbrains.kotlin.backend.common.serialization.proto.Annotations value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            annotations_ != org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.getDefaultInstance()) {
          annotations_ =
            org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.newBuilder(annotations_).mergeFrom(value).buildPartial();
        } else {
          annotations_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.Annotations annotations = 2;</code>
       */
      public Builder clearAnnotations() {
        annotations_ = org.jetbrains.kotlin.backend.common.serialization.proto.Annotations.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 3;</code>
       */
      public boolean hasAuxTables() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 3;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables() {
        return auxTables_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 3;</code>
       */
      public Builder setAuxTables(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables value) {
        if (value == null) {
          throw new NullPointerException();
        }
        auxTables_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 3;</code>
       */
      public Builder setAuxTables(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.Builder builderForValue) {
        auxTables_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 3;</code>
       */
      public Builder mergeAuxTables(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            auxTables_ != org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance()) {
          auxTables_ =
            org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.newBuilder(auxTables_).mergeFrom(value).buildPartial();
        } else {
          auxTables_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 3;</code>
       */
      public Builder clearAuxTables() {
        auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile)
    }

    static {
      defaultInstance = new JvmIrFile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile)
  }

  public interface JvmIrClassOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
     */
    boolean hasIrClass();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getIrClass();

    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
     */
    boolean hasAuxTables();
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass}
   */
  public static final class JvmIrClass extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass)
      JvmIrClassOrBuilder {
    // Use JvmIrClass.newBuilder() to construct.
    private JvmIrClass(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JvmIrClass(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final JvmIrClass defaultInstance;
    public static JvmIrClass getDefaultInstance() {
      return defaultInstance;
    }

    public JvmIrClass getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private JvmIrClass(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = irClass_.toBuilder();
              }
              irClass_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(irClass_);
                irClass_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = auxTables_.toBuilder();
              }
              auxTables_ = input.readMessage(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auxTables_);
                auxTables_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<JvmIrClass> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<JvmIrClass>() {
      public JvmIrClass parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new JvmIrClass(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JvmIrClass> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int IR_CLASS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.backend.common.serialization.proto.IrClass irClass_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
     */
    public boolean hasIrClass() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getIrClass() {
      return irClass_;
    }

    public static final int AUX_TABLES_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables auxTables_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
     */
    public boolean hasAuxTables() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables() {
      return auxTables_;
    }

    private void initFields() {
      irClass_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance();
      auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIrClass()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAuxTables()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getIrClass().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAuxTables().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, irClass_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, auxTables_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, irClass_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, auxTables_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClassOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        irClass_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.irClass_ = irClass_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.auxTables_ = auxTables_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass.getDefaultInstance()) return this;
        if (other.hasIrClass()) {
          mergeIrClass(other.getIrClass());
        }
        if (other.hasAuxTables()) {
          mergeAuxTables(other.getAuxTables());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIrClass()) {
          
          return false;
        }
        if (!hasAuxTables()) {
          
          return false;
        }
        if (!getIrClass().isInitialized()) {
          
          return false;
        }
        if (!getAuxTables().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.backend.common.serialization.proto.IrClass irClass_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public boolean hasIrClass() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getIrClass() {
        return irClass_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public Builder setIrClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
        if (value == null) {
          throw new NullPointerException();
        }
        irClass_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public Builder setIrClass(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder builderForValue) {
        irClass_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public Builder mergeIrClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            irClass_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance()) {
          irClass_ =
            org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.newBuilder(irClass_).mergeFrom(value).buildPartial();
        } else {
          irClass_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public Builder clearIrClass() {
        irClass_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public boolean hasAuxTables() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables() {
        return auxTables_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public Builder setAuxTables(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables value) {
        if (value == null) {
          throw new NullPointerException();
        }
        auxTables_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public Builder setAuxTables(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.Builder builderForValue) {
        auxTables_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public Builder mergeAuxTables(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            auxTables_ != org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance()) {
          auxTables_ =
            org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.newBuilder(auxTables_).mergeFrom(value).buildPartial();
        } else {
          auxTables_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public Builder clearAuxTables() {
        auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass)
    }

    static {
      defaultInstance = new JvmIrClass(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}