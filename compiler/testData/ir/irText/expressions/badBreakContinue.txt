FILE fqName:<root> fileName:/badBreakContinue.kt
  FUN #0 name:test1 visibility:public modality:FINAL <> () returnType:kotlin.Unit 
    BLOCK_BODY
      ERROR_EXPR 'Loop not found for break expression: break' type=kotlin.Nothing
      ERROR_EXPR 'Loop not found for continue expression: continue' type=kotlin.Nothing
  FUN #1 name:test2 visibility:public modality:FINAL <> () returnType:kotlin.Unit 
    BLOCK_BODY
      WHILE label=L1 origin=WHILE_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          ERROR_EXPR 'Loop not found for break expression: break@ERROR' type=kotlin.Nothing
          ERROR_EXPR 'Loop not found for continue expression: continue@ERROR' type=kotlin.Nothing
  FUN #2 name:test3 visibility:public modality:FINAL <> () returnType:kotlin.Unit 
    BLOCK_BODY
      WHILE label=L1 origin=WHILE_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          VAR #3 name:lambda type:kotlin.Function0<kotlin.Nothing> [val] 
            BLOCK type=kotlin.Function0<kotlin.Nothing> origin=LAMBDA
              FUN #4 LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:kotlin.Nothing 
                BLOCK_BODY
                  ERROR_EXPR 'Loop not found for break expression: break@L1' type=kotlin.Nothing
                  ERROR_EXPR 'Loop not found for continue expression: continue@L1' type=kotlin.Nothing
              FUNCTION_REFERENCE '#4 local final fun <anonymous> (): kotlin.Nothing declared in <root>.test3' type=kotlin.Function0<kotlin.Nothing> origin=LAMBDA
  FUN #5 name:test4 visibility:public modality:FINAL <> () returnType:kotlin.Unit 
    BLOCK_BODY
      WHILE label=null origin=WHILE_LOOP
        condition: ERROR_EXPR 'Loop not found for break expression: break' type=kotlin.Nothing
        body: BLOCK type=kotlin.Unit origin=null
      WHILE label=null origin=WHILE_LOOP
        condition: ERROR_EXPR 'Loop not found for continue expression: continue' type=kotlin.Nothing
        body: BLOCK type=kotlin.Unit origin=null
