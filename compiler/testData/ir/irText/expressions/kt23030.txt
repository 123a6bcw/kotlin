FILE fqName:<root> fileName:/kt23030.kt
  FUN #0 name:compareTo visibility:public modality:FINAL <> ($receiver:kotlin.Int, c:kotlin.Char) returnType:kotlin.Int 
    $receiver: VALUE_PARAMETER #1 name:<this> type:kotlin.Int 
    VALUE_PARAMETER #2 name:c index:0 type:kotlin.Char 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#0 public final fun compareTo (c: kotlin.Char): kotlin.Int declared in <root>'
        CONST Int type=kotlin.Int value=0
  FUN #3 name:testOverloadedCompareToCall visibility:public modality:FINAL <> (x:kotlin.Int, y:kotlin.Char) returnType:kotlin.Boolean 
    VALUE_PARAMETER #4 name:x index:0 type:kotlin.Int 
    VALUE_PARAMETER #5 name:y index:1 type:kotlin.Char 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#3 public final fun testOverloadedCompareToCall (x: kotlin.Int, y: kotlin.Char): kotlin.Boolean declared in <root>'
        CALL '#6 public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
          arg0: CALL '#0 public final fun compareTo (c: kotlin.Char): kotlin.Int declared in <root>' type=kotlin.Int origin=LT
            $receiver: GET_VAR '#4 x: kotlin.Int declared in <root>.testOverloadedCompareToCall' type=kotlin.Int origin=null
            c: GET_VAR '#5 y: kotlin.Char declared in <root>.testOverloadedCompareToCall' type=kotlin.Char origin=null
          arg1: CONST Int type=kotlin.Int value=0
  FUN #7 name:testOverloadedCompareToCallWithSmartCast visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #8 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #9 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#7 public final fun testOverloadedCompareToCallWithSmartCast (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
                  GET_VAR '#8 x: kotlin.Any declared in <root>.testOverloadedCompareToCallWithSmartCast' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Char
                  GET_VAR '#9 y: kotlin.Any declared in <root>.testOverloadedCompareToCallWithSmartCast' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL '#6 public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
              arg0: CALL '#0 public final fun compareTo (c: kotlin.Char): kotlin.Int declared in <root>' type=kotlin.Int origin=LT
                $receiver: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                  GET_VAR '#8 x: kotlin.Any declared in <root>.testOverloadedCompareToCallWithSmartCast' type=kotlin.Any origin=null
                c: TYPE_OP type=kotlin.Char origin=IMPLICIT_CAST typeOperand=kotlin.Char
                  GET_VAR '#9 y: kotlin.Any declared in <root>.testOverloadedCompareToCallWithSmartCast' type=kotlin.Any origin=null
              arg1: CONST Int type=kotlin.Int value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #10 name:testEqualsWithSmartCast visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #11 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #12 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#10 public final fun testEqualsWithSmartCast (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
                  GET_VAR '#11 x: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Char
                  GET_VAR '#12 y: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL '#13 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR '#11 x: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
              arg1: GET_VAR '#12 y: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  CLASS #14 CLASS name:C modality:FINAL visibility:public superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER #15 INSTANCE_RECEIVER name:<this> type:<root>.C 
    CONSTRUCTOR #16 visibility:public <> () returnType:<root>.C [primary] 
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL '#17 public constructor <init> () [primary] declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL class='#14 class CLASS C declared in <root>'
    FUN #18 name:compareTo visibility:public modality:FINAL <> ($this:<root>.C, $receiver:kotlin.Int, c:kotlin.Char) returnType:kotlin.Int 
      $this: VALUE_PARAMETER #19 name:<this> type:<root>.C 
      $receiver: VALUE_PARAMETER #20 name:<this> type:kotlin.Int 
      VALUE_PARAMETER #21 name:c index:0 type:kotlin.Char 
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='#18 public final fun compareTo (c: kotlin.Char): kotlin.Int declared in <root>.C'
          CONST Int type=kotlin.Int value=0
    FUN #22 name:testMemberExtensionCompareToCall visibility:public modality:FINAL <> ($this:<root>.C, x:kotlin.Int, y:kotlin.Char) returnType:kotlin.Boolean 
      $this: VALUE_PARAMETER #23 name:<this> type:<root>.C 
      VALUE_PARAMETER #24 name:x index:0 type:kotlin.Int 
      VALUE_PARAMETER #25 name:y index:1 type:kotlin.Char 
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='#22 public final fun testMemberExtensionCompareToCall (x: kotlin.Int, y: kotlin.Char): kotlin.Boolean declared in <root>.C'
          CALL '#6 public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
            arg0: CALL '#18 public final fun compareTo (c: kotlin.Char): kotlin.Int declared in <root>.C' type=kotlin.Int origin=LT
              $this: GET_VAR '#23 <this>: <root>.C declared in <root>.C.testMemberExtensionCompareToCall' type=<root>.C origin=null
              $receiver: GET_VAR '#24 x: kotlin.Int declared in <root>.C.testMemberExtensionCompareToCall' type=kotlin.Int origin=null
              c: GET_VAR '#25 y: kotlin.Char declared in <root>.C.testMemberExtensionCompareToCall' type=kotlin.Char origin=null
            arg1: CONST Int type=kotlin.Int value=0
    FUN #26 name:testMemberExtensionCompareToCallWithSmartCast visibility:public modality:FINAL <> ($this:<root>.C, x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
      $this: VALUE_PARAMETER #27 name:<this> type:<root>.C 
      VALUE_PARAMETER #28 name:x index:0 type:kotlin.Any 
      VALUE_PARAMETER #29 name:y index:1 type:kotlin.Any 
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='#26 public final fun testMemberExtensionCompareToCallWithSmartCast (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>.C'
          WHEN type=kotlin.Boolean origin=ANDAND
            BRANCH
              if: WHEN type=kotlin.Boolean origin=ANDAND
                BRANCH
                  if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
                    GET_VAR '#28 x: kotlin.Any declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=kotlin.Any origin=null
                  then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Char
                    GET_VAR '#29 y: kotlin.Any declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=kotlin.Any origin=null
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Boolean type=kotlin.Boolean value=false
              then: CALL '#6 public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                arg0: CALL '#18 public final fun compareTo (c: kotlin.Char): kotlin.Int declared in <root>.C' type=kotlin.Int origin=LT
                  $this: GET_VAR '#27 <this>: <root>.C declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=<root>.C origin=null
                  $receiver: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                    GET_VAR '#28 x: kotlin.Any declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=kotlin.Any origin=null
                  c: TYPE_OP type=kotlin.Char origin=IMPLICIT_CAST typeOperand=kotlin.Char
                    GET_VAR '#29 y: kotlin.Any declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=kotlin.Any origin=null
                arg1: CONST Int type=kotlin.Int value=0
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Boolean type=kotlin.Boolean value=false
    FUN #30 FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean 
      overridden:
        #31 public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
      $this: VALUE_PARAMETER #32 name:<this> type:kotlin.Any 
      VALUE_PARAMETER #33 name:other index:0 type:kotlin.Any? 
    FUN #34 FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int 
      overridden:
        #35 public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER #36 name:<this> type:kotlin.Any 
    FUN #37 FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String 
      overridden:
        #38 public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER #39 name:<this> type:kotlin.Any 
