FILE fqName:<root> fileName:/kt24804.kt
  FUN #0 name:foo visibility:public modality:FINAL <> () returnType:kotlin.Boolean [inline] 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#0 public final fun foo (): kotlin.Boolean [inline] declared in <root>'
        CONST Boolean type=kotlin.Boolean value=false
  FUN #1 name:run visibility:public modality:FINAL <> (x:kotlin.Boolean, y:kotlin.Boolean) returnType:kotlin.String 
    VALUE_PARAMETER #2 name:x index:0 type:kotlin.Boolean 
    VALUE_PARAMETER #3 name:y index:1 type:kotlin.Boolean 
    BLOCK_BODY
      VAR #4 name:z type:kotlin.Int [var] 
        CONST Int type=kotlin.Int value=10
      BLOCK type=kotlin.Unit origin=null
        DO_WHILE label=l2 origin=DO_WHILE_LOOP
          body: COMPOSITE type=kotlin.Unit origin=null
            SET_VAR '#4 var z: kotlin.Int [var] declared in <root>.run' type=kotlin.Unit origin=PLUSEQ
              CALL '#5 public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUSEQ
                $this: GET_VAR '#4 var z: kotlin.Int [var] declared in <root>.run' type=kotlin.Int origin=PLUSEQ
                other: CONST Int type=kotlin.Int value=1
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: CALL '#6 public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
                  arg0: GET_VAR '#4 var z: kotlin.Int [var] declared in <root>.run' type=kotlin.Int origin=null
                  arg1: CONST Int type=kotlin.Int value=100
                then: RETURN type=kotlin.Nothing from='#1 public final fun run (x: kotlin.Boolean, y: kotlin.Boolean): kotlin.String declared in <root>'
                  CONST String type=kotlin.String value="NOT_OK"
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: GET_VAR '#2 x: kotlin.Boolean declared in <root>.run' type=kotlin.Boolean origin=null
                then: CONTINUE label=l2 loop.label=l2
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: GET_VAR '#3 y: kotlin.Boolean declared in <root>.run' type=kotlin.Boolean origin=null
                then: CONTINUE label=l2 loop.label=l2
          condition: CALL '#0 public final fun foo (): kotlin.Boolean [inline] declared in <root>' type=kotlin.Boolean origin=null
      RETURN type=kotlin.Nothing from='#1 public final fun run (x: kotlin.Boolean, y: kotlin.Boolean): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
  FUN #7 name:box visibility:public modality:FINAL <> () returnType:kotlin.String 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#7 public final fun box (): kotlin.String declared in <root>'
        CALL '#1 public final fun run (x: kotlin.Boolean, y: kotlin.Boolean): kotlin.String declared in <root>' type=kotlin.String origin=null
          x: CONST Boolean type=kotlin.Boolean value=true
          y: CONST Boolean type=kotlin.Boolean value=true
