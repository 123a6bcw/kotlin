FILE fqName:<root> fileName:/bangbang.kt
  FUN #0 name:test1 visibility:public modality:FINAL <> (a:kotlin.Any?) returnType:kotlin.Any 
    VALUE_PARAMETER #1 name:a index:0 type:kotlin.Any? 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#0 public final fun test1 (a: kotlin.Any?): kotlin.Any declared in <root>'
        BLOCK type=kotlin.Any origin=EXCLEXCL
          VAR #2 IR_TEMPORARY_VARIABLE name:tmp0_notnull type:kotlin.Any? [val] 
            GET_VAR '#1 a: kotlin.Any? declared in <root>.test1' type=kotlin.Any? origin=null
          WHEN type=kotlin.Any origin=null
            BRANCH
              if: CALL '#3 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR '#2 val tmp0_notnull: kotlin.Any? [val] declared in <root>.test1' type=kotlin.Any? origin=null
                arg1: CONST Null type=kotlin.Nothing? value=null
              then: CALL '#4 public final fun THROW_NPE (): kotlin.Nothing declared in kotlin.internal.ir' type=kotlin.Nothing origin=EXCLEXCL
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: GET_VAR '#2 val tmp0_notnull: kotlin.Any? [val] declared in <root>.test1' type=kotlin.Any? origin=null
  FUN #5 name:test2 visibility:public modality:FINAL <> (a:kotlin.Any?) returnType:kotlin.Int 
    VALUE_PARAMETER #6 name:a index:0 type:kotlin.Any? 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#5 public final fun test2 (a: kotlin.Any?): kotlin.Int declared in <root>'
        BLOCK type=kotlin.Int origin=EXCLEXCL
          VAR #7 IR_TEMPORARY_VARIABLE name:tmp1_notnull type:kotlin.Int? [val] 
            BLOCK type=kotlin.Int? origin=SAFE_CALL
              VAR #8 IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:kotlin.Any? [val] 
                GET_VAR '#6 a: kotlin.Any? declared in <root>.test2' type=kotlin.Any? origin=null
              WHEN type=kotlin.Int? origin=null
                BRANCH
                  if: CALL '#3 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR '#8 val tmp0_safe_receiver: kotlin.Any? [val] declared in <root>.test2' type=kotlin.Any? origin=null
                    arg1: CONST Null type=kotlin.Nothing? value=null
                  then: CONST Null type=kotlin.Nothing? value=null
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CALL '#9 public open fun hashCode (): kotlin.Int declared in kotlin.Any' type=kotlin.Int origin=null
                    $this: GET_VAR '#8 val tmp0_safe_receiver: kotlin.Any? [val] declared in <root>.test2' type=kotlin.Any? origin=null
          WHEN type=kotlin.Int origin=null
            BRANCH
              if: CALL '#3 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR '#7 val tmp1_notnull: kotlin.Int? [val] declared in <root>.test2' type=kotlin.Int? origin=null
                arg1: CONST Null type=kotlin.Nothing? value=null
              then: CALL '#4 public final fun THROW_NPE (): kotlin.Nothing declared in kotlin.internal.ir' type=kotlin.Nothing origin=EXCLEXCL
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: GET_VAR '#7 val tmp1_notnull: kotlin.Int? [val] declared in <root>.test2' type=kotlin.Int? origin=null
