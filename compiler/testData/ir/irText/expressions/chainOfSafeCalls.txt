FILE fqName:<root> fileName:/chainOfSafeCalls.kt
  CLASS #0 CLASS name:C modality:FINAL visibility:public superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER #1 INSTANCE_RECEIVER name:<this> type:<root>.C 
    CONSTRUCTOR #2 visibility:public <> () returnType:<root>.C [primary] 
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL '#3 public constructor <init> () [primary] declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL class='#0 class CLASS C declared in <root>'
    FUN #4 name:foo visibility:public modality:FINAL <> ($this:<root>.C) returnType:<root>.C 
      $this: VALUE_PARAMETER #5 name:<this> type:<root>.C 
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='#4 public final fun foo (): <root>.C declared in <root>.C'
          GET_VAR '#5 <this>: <root>.C declared in <root>.C.foo' type=<root>.C origin=null
    FUN #6 name:bar visibility:public modality:FINAL <> ($this:<root>.C) returnType:<root>.C? 
      $this: VALUE_PARAMETER #7 name:<this> type:<root>.C 
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='#6 public final fun bar (): <root>.C? declared in <root>.C'
          GET_VAR '#7 <this>: <root>.C declared in <root>.C.bar' type=<root>.C origin=null
    FUN #8 FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean 
      overridden:
        #9 public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
      $this: VALUE_PARAMETER #10 name:<this> type:kotlin.Any 
      VALUE_PARAMETER #11 name:other index:0 type:kotlin.Any? 
    FUN #12 FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int 
      overridden:
        #13 public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER #14 name:<this> type:kotlin.Any 
    FUN #15 FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String 
      overridden:
        #16 public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER #17 name:<this> type:kotlin.Any 
  FUN #18 name:test visibility:public modality:FINAL <> (nc:<root>.C?) returnType:<root>.C? 
    VALUE_PARAMETER #19 name:nc index:0 type:<root>.C? 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#18 public final fun test (nc: <root>.C?): <root>.C? declared in <root>'
        BLOCK type=<root>.C? origin=SAFE_CALL
          VAR #20 IR_TEMPORARY_VARIABLE name:tmp3_safe_receiver type:<root>.C? [val] 
            BLOCK type=<root>.C? origin=SAFE_CALL
              VAR #21 IR_TEMPORARY_VARIABLE name:tmp2_safe_receiver type:<root>.C? [val] 
                BLOCK type=<root>.C? origin=SAFE_CALL
                  VAR #22 IR_TEMPORARY_VARIABLE name:tmp1_safe_receiver type:<root>.C? [val] 
                    BLOCK type=<root>.C? origin=SAFE_CALL
                      VAR #23 IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:<root>.C? [val] 
                        GET_VAR '#19 nc: <root>.C? declared in <root>.test' type=<root>.C? origin=null
                      WHEN type=<root>.C? origin=null
                        BRANCH
                          if: CALL '#24 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                            arg0: GET_VAR '#23 val tmp0_safe_receiver: <root>.C? [val] declared in <root>.test' type=<root>.C? origin=null
                            arg1: CONST Null type=kotlin.Nothing? value=null
                          then: CONST Null type=kotlin.Nothing? value=null
                        BRANCH
                          if: CONST Boolean type=kotlin.Boolean value=true
                          then: CALL '#4 public final fun foo (): <root>.C declared in <root>.C' type=<root>.C origin=null
                            $this: GET_VAR '#23 val tmp0_safe_receiver: <root>.C? [val] declared in <root>.test' type=<root>.C? origin=null
                  WHEN type=<root>.C? origin=null
                    BRANCH
                      if: CALL '#24 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR '#22 val tmp1_safe_receiver: <root>.C? [val] declared in <root>.test' type=<root>.C? origin=null
                        arg1: CONST Null type=kotlin.Nothing? value=null
                      then: CONST Null type=kotlin.Nothing? value=null
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CALL '#6 public final fun bar (): <root>.C? declared in <root>.C' type=<root>.C? origin=null
                        $this: GET_VAR '#22 val tmp1_safe_receiver: <root>.C? [val] declared in <root>.test' type=<root>.C? origin=null
              WHEN type=<root>.C? origin=null
                BRANCH
                  if: CALL '#24 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR '#21 val tmp2_safe_receiver: <root>.C? [val] declared in <root>.test' type=<root>.C? origin=null
                    arg1: CONST Null type=kotlin.Nothing? value=null
                  then: CONST Null type=kotlin.Nothing? value=null
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CALL '#4 public final fun foo (): <root>.C declared in <root>.C' type=<root>.C origin=null
                    $this: GET_VAR '#21 val tmp2_safe_receiver: <root>.C? [val] declared in <root>.test' type=<root>.C? origin=null
          WHEN type=<root>.C? origin=null
            BRANCH
              if: CALL '#24 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR '#20 val tmp3_safe_receiver: <root>.C? [val] declared in <root>.test' type=<root>.C? origin=null
                arg1: CONST Null type=kotlin.Nothing? value=null
              then: CONST Null type=kotlin.Nothing? value=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CALL '#4 public final fun foo (): <root>.C declared in <root>.C' type=<root>.C origin=null
                $this: GET_VAR '#20 val tmp3_safe_receiver: <root>.C? [val] declared in <root>.test' type=<root>.C? origin=null
