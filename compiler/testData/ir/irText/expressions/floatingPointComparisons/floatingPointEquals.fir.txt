FILE fqName:<root> fileName:/floatingPointEquals.kt
  FUN #0 name:test1d visibility:public modality:FINAL <> (x:kotlin.Double, y:kotlin.Double) returnType:IrErrorType 
    VALUE_PARAMETER #1 name:x index:0 type:kotlin.Double 
    VALUE_PARAMETER #2 name:y index:1 type:kotlin.Double 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#0 public final fun test1d (x: kotlin.Double, y: kotlin.Double): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#2 y: kotlin.Double declared in <root>.test1d' type=kotlin.Double origin=null
  FUN #3 name:test2d visibility:public modality:FINAL <> (x:kotlin.Double, y:kotlin.Double?) returnType:IrErrorType 
    VALUE_PARAMETER #4 name:x index:0 type:kotlin.Double 
    VALUE_PARAMETER #5 name:y index:1 type:kotlin.Double? 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#3 public final fun test2d (x: kotlin.Double, y: kotlin.Double?): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#5 y: kotlin.Double? declared in <root>.test2d' type=kotlin.Double? origin=null
  FUN #6 name:test3d visibility:public modality:FINAL <> (x:kotlin.Double, y:kotlin.Any) returnType:IrErrorType 
    VALUE_PARAMETER #7 name:x index:0 type:kotlin.Double 
    VALUE_PARAMETER #8 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#6 public final fun test3d (x: kotlin.Double, y: kotlin.Any): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#8 y: kotlin.Any declared in <root>.test3d' type=kotlin.Any origin=null
  FUN #9 name:test4d visibility:public modality:FINAL <> (x:kotlin.Double, y:kotlin.Number) returnType:IrErrorType 
    VALUE_PARAMETER #10 name:x index:0 type:kotlin.Double 
    VALUE_PARAMETER #11 name:y index:1 type:kotlin.Number 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#9 public final fun test4d (x: kotlin.Double, y: kotlin.Number): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#11 y: kotlin.Number declared in <root>.test4d' type=kotlin.Number origin=null
  FUN #12 name:test5d visibility:public modality:FINAL <> (x:kotlin.Double, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #13 name:x index:0 type:kotlin.Double 
    VALUE_PARAMETER #14 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#12 public final fun test5d (x: kotlin.Double, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
              GET_VAR '#14 y: kotlin.Any declared in <root>.test5d' type=kotlin.Any origin=null
            then: ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
              GET_VAR '#14 y: kotlin.Any declared in <root>.test5d' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #15 name:test6d visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #16 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #17 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#15 public final fun test6d (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
                  GET_VAR '#16 x: kotlin.Any declared in <root>.test6d' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
                  GET_VAR '#17 y: kotlin.Any declared in <root>.test6d' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL '#18 public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any' type=kotlin.Boolean origin=null
              other: GET_VAR '#17 y: kotlin.Any declared in <root>.test6d' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #19 name:test1f visibility:public modality:FINAL <> (x:kotlin.Float, y:kotlin.Float) returnType:IrErrorType 
    VALUE_PARAMETER #20 name:x index:0 type:kotlin.Float 
    VALUE_PARAMETER #21 name:y index:1 type:kotlin.Float 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#19 public final fun test1f (x: kotlin.Float, y: kotlin.Float): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#21 y: kotlin.Float declared in <root>.test1f' type=kotlin.Float origin=null
  FUN #22 name:test2f visibility:public modality:FINAL <> (x:kotlin.Float, y:kotlin.Float?) returnType:IrErrorType 
    VALUE_PARAMETER #23 name:x index:0 type:kotlin.Float 
    VALUE_PARAMETER #24 name:y index:1 type:kotlin.Float? 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#22 public final fun test2f (x: kotlin.Float, y: kotlin.Float?): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#24 y: kotlin.Float? declared in <root>.test2f' type=kotlin.Float? origin=null
  FUN #25 name:test3f visibility:public modality:FINAL <> (x:kotlin.Float, y:kotlin.Any) returnType:IrErrorType 
    VALUE_PARAMETER #26 name:x index:0 type:kotlin.Float 
    VALUE_PARAMETER #27 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#25 public final fun test3f (x: kotlin.Float, y: kotlin.Any): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#27 y: kotlin.Any declared in <root>.test3f' type=kotlin.Any origin=null
  FUN #28 name:test4f visibility:public modality:FINAL <> (x:kotlin.Float, y:kotlin.Number) returnType:IrErrorType 
    VALUE_PARAMETER #29 name:x index:0 type:kotlin.Float 
    VALUE_PARAMETER #30 name:y index:1 type:kotlin.Number 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#28 public final fun test4f (x: kotlin.Float, y: kotlin.Number): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#30 y: kotlin.Number declared in <root>.test4f' type=kotlin.Number origin=null
  FUN #31 name:test5f visibility:public modality:FINAL <> (x:kotlin.Float, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #32 name:x index:0 type:kotlin.Float 
    VALUE_PARAMETER #33 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#31 public final fun test5f (x: kotlin.Float, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
              GET_VAR '#33 y: kotlin.Any declared in <root>.test5f' type=kotlin.Any origin=null
            then: ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
              GET_VAR '#33 y: kotlin.Any declared in <root>.test5f' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #34 name:test6f visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #35 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #36 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#34 public final fun test6f (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
                  GET_VAR '#35 x: kotlin.Any declared in <root>.test6f' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
                  GET_VAR '#36 y: kotlin.Any declared in <root>.test6f' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL '#18 public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any' type=kotlin.Boolean origin=null
              other: GET_VAR '#36 y: kotlin.Any declared in <root>.test6f' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #37 name:testFD visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #38 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #39 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#37 public final fun testFD (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
                  GET_VAR '#38 x: kotlin.Any declared in <root>.testFD' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
                  GET_VAR '#39 y: kotlin.Any declared in <root>.testFD' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL '#18 public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any' type=kotlin.Boolean origin=null
              other: GET_VAR '#39 y: kotlin.Any declared in <root>.testFD' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #40 name:testDF visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #41 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #42 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#40 public final fun testDF (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
                  GET_VAR '#41 x: kotlin.Any declared in <root>.testDF' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
                  GET_VAR '#42 y: kotlin.Any declared in <root>.testDF' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL '#18 public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any' type=kotlin.Boolean origin=null
              other: GET_VAR '#42 y: kotlin.Any declared in <root>.testDF' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #43 name:test1fr visibility:public modality:FINAL <> (x:kotlin.Float) returnType:IrErrorType 
    VALUE_PARAMETER #44 name:x index:0 type:kotlin.Float 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#43 public final fun test1fr (x: kotlin.Float): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#44 x: kotlin.Float declared in <root>.test1fr' type=kotlin.Float origin=null
  FUN #45 name:test2fr visibility:public modality:FINAL <> (x:kotlin.Float?) returnType:IrErrorType 
    VALUE_PARAMETER #46 name:x index:0 type:kotlin.Float? 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#45 public final fun test2fr (x: kotlin.Float?): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#46 x: kotlin.Float? declared in <root>.test2fr' type=kotlin.Float? origin=null
  FUN #47 name:test3fr visibility:public modality:FINAL <> (x:kotlin.Any) returnType:IrErrorType 
    VALUE_PARAMETER #48 name:x index:0 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#47 public final fun test3fr (x: kotlin.Any): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#48 x: kotlin.Any declared in <root>.test3fr' type=kotlin.Any origin=null
  FUN #49 name:test4fr visibility:public modality:FINAL <> (x:kotlin.Number) returnType:IrErrorType 
    VALUE_PARAMETER #50 name:x index:0 type:kotlin.Number 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#49 public final fun test4fr (x: kotlin.Number): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
          GET_VAR '#50 x: kotlin.Number declared in <root>.test4fr' type=kotlin.Number origin=null
  FUN #51 name:test5fr visibility:public modality:FINAL <> (x:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #52 name:x index:0 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#51 public final fun test5fr (x: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
              GET_VAR '#52 x: kotlin.Any declared in <root>.test5fr' type=kotlin.Any origin=null
            then: ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
              GET_VAR '#52 x: kotlin.Any declared in <root>.test5fr' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #53 name:test6fr visibility:public modality:FINAL <> (x:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #54 name:x index:0 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#53 public final fun test6fr (x: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
              GET_VAR '#54 x: kotlin.Any declared in <root>.test6fr' type=kotlin.Any origin=null
            then: ERROR_CALL 'Unresolved reference: <Ambiguity: equals, [kotlin/Any.equals, kotlin/Any.equals]>#' type=IrErrorType
              GET_VAR '#54 x: kotlin.Any declared in <root>.test6fr' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
