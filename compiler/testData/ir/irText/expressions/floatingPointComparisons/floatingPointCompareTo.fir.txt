FILE fqName:<root> fileName:/floatingPointCompareTo.kt
  FUN #0 name:test1d visibility:public modality:FINAL <> (x:kotlin.Double, y:kotlin.Double) returnType:IrErrorType 
    VALUE_PARAMETER #1 name:x index:0 type:kotlin.Double 
    VALUE_PARAMETER #2 name:y index:1 type:kotlin.Double 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#0 public final fun test1d (x: kotlin.Double, y: kotlin.Double): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: compareTo, [kotlin/Double.compareTo, kotlin/Double.compareTo, kotlin/Double.compareTo, kotlin/Double.compareTo, kotlin/Double.compareTo, kotlin/Double.compareTo, kotlin/Comparable.compareTo]>#' type=IrErrorType
          GET_VAR '#2 y: kotlin.Double declared in <root>.test1d' type=kotlin.Double origin=null
  FUN #3 name:test2d visibility:public modality:FINAL <> (x:kotlin.Double, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #4 name:x index:0 type:kotlin.Double 
    VALUE_PARAMETER #5 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#3 public final fun test2d (x: kotlin.Double, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
              GET_VAR '#5 y: kotlin.Any declared in <root>.test2d' type=kotlin.Any origin=null
            then: CALL '#6 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: ERROR_CALL 'Unresolved reference: <Ambiguity: compareTo, [kotlin/Double.compareTo, kotlin/Double.compareTo, kotlin/Double.compareTo, kotlin/Double.compareTo, kotlin/Double.compareTo, kotlin/Double.compareTo, kotlin/Comparable.compareTo]>#' type=IrErrorType
                GET_VAR '#5 y: kotlin.Any declared in <root>.test2d' type=kotlin.Any origin=null
              arg1: CONST Int type=kotlin.Boolean value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #7 name:test3d visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #8 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #9 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#7 public final fun test3d (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
                  GET_VAR '#8 x: kotlin.Any declared in <root>.test3d' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
                  GET_VAR '#9 y: kotlin.Any declared in <root>.test3d' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL '#6 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: ERROR_CALL 'Unresolved reference: <Unresolved name: compareTo>#' type=IrErrorType
                GET_VAR '#9 y: kotlin.Any declared in <root>.test3d' type=kotlin.Any origin=null
              arg1: CONST Int type=kotlin.Boolean value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #10 name:test1f visibility:public modality:FINAL <> (x:kotlin.Float, y:kotlin.Float) returnType:IrErrorType 
    VALUE_PARAMETER #11 name:x index:0 type:kotlin.Float 
    VALUE_PARAMETER #12 name:y index:1 type:kotlin.Float 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#10 public final fun test1f (x: kotlin.Float, y: kotlin.Float): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: compareTo, [kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Comparable.compareTo]>#' type=IrErrorType
          GET_VAR '#12 y: kotlin.Float declared in <root>.test1f' type=kotlin.Float origin=null
  FUN #13 name:test2f visibility:public modality:FINAL <> (x:kotlin.Float, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #14 name:x index:0 type:kotlin.Float 
    VALUE_PARAMETER #15 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#13 public final fun test2f (x: kotlin.Float, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
              GET_VAR '#15 y: kotlin.Any declared in <root>.test2f' type=kotlin.Any origin=null
            then: CALL '#6 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: ERROR_CALL 'Unresolved reference: <Ambiguity: compareTo, [kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Comparable.compareTo]>#' type=IrErrorType
                GET_VAR '#15 y: kotlin.Any declared in <root>.test2f' type=kotlin.Any origin=null
              arg1: CONST Int type=kotlin.Boolean value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #16 name:test3f visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #17 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #18 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#16 public final fun test3f (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
                  GET_VAR '#17 x: kotlin.Any declared in <root>.test3f' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
                  GET_VAR '#18 y: kotlin.Any declared in <root>.test3f' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL '#6 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: ERROR_CALL 'Unresolved reference: <Unresolved name: compareTo>#' type=IrErrorType
                GET_VAR '#18 y: kotlin.Any declared in <root>.test3f' type=kotlin.Any origin=null
              arg1: CONST Int type=kotlin.Boolean value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #19 name:testFD visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #20 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #21 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#19 public final fun testFD (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
                  GET_VAR '#20 x: kotlin.Any declared in <root>.testFD' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
                  GET_VAR '#21 y: kotlin.Any declared in <root>.testFD' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL '#6 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: ERROR_CALL 'Unresolved reference: <Unresolved name: compareTo>#' type=IrErrorType
                GET_VAR '#21 y: kotlin.Any declared in <root>.testFD' type=kotlin.Any origin=null
              arg1: CONST Int type=kotlin.Boolean value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #22 name:testDF visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #23 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #24 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#22 public final fun testDF (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
                  GET_VAR '#23 x: kotlin.Any declared in <root>.testDF' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
                  GET_VAR '#24 y: kotlin.Any declared in <root>.testDF' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL '#6 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: ERROR_CALL 'Unresolved reference: <Unresolved name: compareTo>#' type=IrErrorType
                GET_VAR '#24 y: kotlin.Any declared in <root>.testDF' type=kotlin.Any origin=null
              arg1: CONST Int type=kotlin.Boolean value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #25 name:test1fr visibility:public modality:FINAL <> (x:kotlin.Float) returnType:IrErrorType 
    VALUE_PARAMETER #26 name:x index:0 type:kotlin.Float 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#25 public final fun test1fr (x: kotlin.Float): IrErrorType declared in <root>'
        ERROR_CALL 'Unresolved reference: <Ambiguity: compareTo, [kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Comparable.compareTo]>#' type=IrErrorType
          GET_VAR '#26 x: kotlin.Float declared in <root>.test1fr' type=kotlin.Float origin=null
  FUN #27 name:test2fr visibility:public modality:FINAL <> (x:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #28 name:x index:0 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#27 public final fun test2fr (x: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
              GET_VAR '#28 x: kotlin.Any declared in <root>.test2fr' type=kotlin.Any origin=null
            then: CALL '#6 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: ERROR_CALL 'Unresolved reference: <Ambiguity: compareTo, [kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Comparable.compareTo]>#' type=IrErrorType
                GET_VAR '#28 x: kotlin.Any declared in <root>.test2fr' type=kotlin.Any origin=null
              arg1: CONST Int type=kotlin.Boolean value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #29 name:test3fr visibility:public modality:FINAL <> (x:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #30 name:x index:0 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#29 public final fun test3fr (x: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
              GET_VAR '#30 x: kotlin.Any declared in <root>.test3fr' type=kotlin.Any origin=null
            then: CALL '#6 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: ERROR_CALL 'Unresolved reference: <Ambiguity: compareTo, [kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Float.compareTo, kotlin/Comparable.compareTo]>#' type=IrErrorType
                GET_VAR '#30 x: kotlin.Any declared in <root>.test3fr' type=kotlin.Any origin=null
              arg1: CONST Int type=kotlin.Boolean value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
