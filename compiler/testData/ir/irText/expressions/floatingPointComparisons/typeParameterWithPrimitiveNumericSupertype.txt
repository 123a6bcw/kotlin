FILE fqName:<root> fileName:/typeParameterWithPrimitiveNumericSupertype.kt
  FUN #0 name:test0 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T of <root>.test0) returnType:kotlin.Boolean 
    TYPE_PARAMETER #1 name:T index:0 variance: superTypes:[kotlin.Any?]
    VALUE_PARAMETER #2 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #3 name:y index:1 type:T of <root>.test0 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#0 public final fun test0 <T> (x: kotlin.Any, y: T of <root>.test0): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
              GET_VAR '#2 x: kotlin.Any declared in <root>.test0' type=kotlin.Any origin=null
            then: CALL '#4 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR '#2 x: kotlin.Any declared in <root>.test0' type=kotlin.Any origin=null
              arg1: GET_VAR '#3 y: T of <root>.test0 declared in <root>.test0' type=T of <root>.test0 origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #5 name:test1 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T of <root>.test1) returnType:kotlin.Boolean 
    TYPE_PARAMETER #6 name:T index:0 variance: superTypes:[kotlin.Float]
    VALUE_PARAMETER #7 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #8 name:y index:1 type:T of <root>.test1 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#5 public final fun test1 <T> (x: kotlin.Any, y: T of <root>.test1): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
              GET_VAR '#7 x: kotlin.Any declared in <root>.test1' type=kotlin.Any origin=null
            then: CALL '#9 public final fun ieee754equals (arg0: kotlin.Float?, arg1: kotlin.Float?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: TYPE_OP type=kotlin.Float origin=IMPLICIT_CAST typeOperand=kotlin.Float
                GET_VAR '#7 x: kotlin.Any declared in <root>.test1' type=kotlin.Any origin=null
              arg1: GET_VAR '#8 y: T of <root>.test1 declared in <root>.test1' type=T of <root>.test1 origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #10 name:test2 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T of <root>.test2) returnType:kotlin.Boolean 
    TYPE_PARAMETER #11 name:T index:0 variance: superTypes:[kotlin.Double]
    VALUE_PARAMETER #12 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #13 name:y index:1 type:T of <root>.test2 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#10 public final fun test2 <T> (x: kotlin.Any, y: T of <root>.test2): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Float
              GET_VAR '#12 x: kotlin.Any declared in <root>.test2' type=kotlin.Any origin=null
            then: CALL '#14 public final fun ieee754equals (arg0: kotlin.Double?, arg1: kotlin.Double?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: CALL '#15 public open fun toDouble (): kotlin.Double declared in kotlin.Float' type=kotlin.Double origin=null
                $this: TYPE_OP type=kotlin.Float origin=IMPLICIT_CAST typeOperand=kotlin.Float
                  GET_VAR '#12 x: kotlin.Any declared in <root>.test2' type=kotlin.Any origin=null
              arg1: GET_VAR '#13 y: T of <root>.test2 declared in <root>.test2' type=T of <root>.test2 origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #16 name:test3 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T of <root>.test3) returnType:kotlin.Boolean 
    TYPE_PARAMETER #17 name:T index:0 variance: superTypes:[kotlin.Float]
    VALUE_PARAMETER #18 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #19 name:y index:1 type:T of <root>.test3 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#16 public final fun test3 <T> (x: kotlin.Any, y: T of <root>.test3): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
              GET_VAR '#18 x: kotlin.Any declared in <root>.test3' type=kotlin.Any origin=null
            then: CALL '#9 public final fun ieee754equals (arg0: kotlin.Float?, arg1: kotlin.Float?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: CALL '#20 public open fun toFloat (): kotlin.Float declared in kotlin.Int' type=kotlin.Float origin=null
                $this: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                  GET_VAR '#18 x: kotlin.Any declared in <root>.test3' type=kotlin.Any origin=null
              arg1: GET_VAR '#19 y: T of <root>.test3 declared in <root>.test3' type=T of <root>.test3 origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #21 name:test4 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T of <root>.test4) returnType:kotlin.Boolean 
    TYPE_PARAMETER #22 name:T index:0 variance: superTypes:[kotlin.Float?]
    VALUE_PARAMETER #23 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #24 name:y index:1 type:T of <root>.test4 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#21 public final fun test4 <T> (x: kotlin.Any, y: T of <root>.test4): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
              GET_VAR '#23 x: kotlin.Any declared in <root>.test4' type=kotlin.Any origin=null
            then: CALL '#9 public final fun ieee754equals (arg0: kotlin.Float?, arg1: kotlin.Float?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: CALL '#20 public open fun toFloat (): kotlin.Float declared in kotlin.Int' type=kotlin.Float origin=null
                $this: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                  GET_VAR '#23 x: kotlin.Any declared in <root>.test4' type=kotlin.Any origin=null
              arg1: GET_VAR '#24 y: T of <root>.test4 declared in <root>.test4' type=T of <root>.test4 origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #25 name:test5 visibility:public modality:FINAL <T, R> (x:kotlin.Any, y:R of <root>.test5) returnType:kotlin.Boolean 
    TYPE_PARAMETER #26 name:T index:0 variance: superTypes:[kotlin.Float?]
    TYPE_PARAMETER #27 name:R index:1 variance: superTypes:[T of <root>.test5]
    VALUE_PARAMETER #28 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #29 name:y index:1 type:R of <root>.test5 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#25 public final fun test5 <T, R> (x: kotlin.Any, y: R of <root>.test5): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
              GET_VAR '#28 x: kotlin.Any declared in <root>.test5' type=kotlin.Any origin=null
            then: CALL '#9 public final fun ieee754equals (arg0: kotlin.Float?, arg1: kotlin.Float?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: CALL '#20 public open fun toFloat (): kotlin.Float declared in kotlin.Int' type=kotlin.Float origin=null
                $this: TYPE_OP type=kotlin.Int origin=IMPLICIT_CAST typeOperand=kotlin.Int
                  GET_VAR '#28 x: kotlin.Any declared in <root>.test5' type=kotlin.Any origin=null
              arg1: GET_VAR '#29 y: R of <root>.test5 declared in <root>.test5' type=R of <root>.test5 origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #30 name:test6 visibility:public modality:FINAL <T> (x:kotlin.Any, y:T of <root>.test6) returnType:kotlin.Boolean 
    TYPE_PARAMETER #31 name:T index:0 variance: superTypes:[kotlin.Number]
    VALUE_PARAMETER #32 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #33 name:y index:1 type:T of <root>.test6 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#30 public final fun test6 <T> (x: kotlin.Any, y: T of <root>.test6): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
              GET_VAR '#32 x: kotlin.Any declared in <root>.test6' type=kotlin.Any origin=null
            then: CALL '#4 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR '#32 x: kotlin.Any declared in <root>.test6' type=kotlin.Any origin=null
              arg1: GET_VAR '#33 y: T of <root>.test6 declared in <root>.test6' type=T of <root>.test6 origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  CLASS #34 CLASS name:F modality:FINAL visibility:public superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER #35 INSTANCE_RECEIVER name:<this> type:<root>.F<T of <root>.F> 
    TYPE_PARAMETER #36 name:T index:0 variance: superTypes:[kotlin.Float]
    CONSTRUCTOR #37 visibility:public <> () returnType:<root>.F<T of <root>.F> [primary] 
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL '#38 public constructor <init> () [primary] declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL class='#34 class CLASS F declared in <root>'
    FUN #39 name:testCapturedType visibility:public modality:FINAL <> ($this:<root>.F<T of <root>.F>, x:T of <root>.F, y:kotlin.Any) returnType:kotlin.Boolean 
      $this: VALUE_PARAMETER #40 name:<this> type:<root>.F<T of <root>.F> 
      VALUE_PARAMETER #41 name:x index:0 type:T of <root>.F 
      VALUE_PARAMETER #42 name:y index:1 type:kotlin.Any 
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='#39 public final fun testCapturedType (x: T of <root>.F, y: kotlin.Any): kotlin.Boolean declared in <root>.F'
          WHEN type=kotlin.Boolean origin=ANDAND
            BRANCH
              if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Double
                GET_VAR '#42 y: kotlin.Any declared in <root>.F.testCapturedType' type=kotlin.Any origin=null
              then: CALL '#14 public final fun ieee754equals (arg0: kotlin.Double?, arg1: kotlin.Double?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: CALL '#15 public open fun toDouble (): kotlin.Double declared in kotlin.Float' type=kotlin.Double origin=null
                  $this: GET_VAR '#41 x: T of <root>.F declared in <root>.F.testCapturedType' type=T of <root>.F origin=null
                arg1: TYPE_OP type=kotlin.Double origin=IMPLICIT_CAST typeOperand=kotlin.Double
                  GET_VAR '#42 y: kotlin.Any declared in <root>.F.testCapturedType' type=kotlin.Any origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Boolean type=kotlin.Boolean value=false
    FUN #43 FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean 
      overridden:
        #44 public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
      $this: VALUE_PARAMETER #45 name:<this> type:kotlin.Any 
      VALUE_PARAMETER #46 name:other index:0 type:kotlin.Any? 
    FUN #47 FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int 
      overridden:
        #48 public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER #49 name:<this> type:kotlin.Any 
    FUN #50 FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String 
      overridden:
        #51 public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER #52 name:<this> type:kotlin.Any 
