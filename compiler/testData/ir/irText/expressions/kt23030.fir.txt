FILE fqName:<root> fileName:/kt23030.kt
  FUN #0 name:compareTo visibility:public modality:FINAL <> (c:kotlin.Char) returnType:kotlin.Int 
    VALUE_PARAMETER #1 name:c index:0 type:kotlin.Char 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#0 public final fun compareTo (c: kotlin.Char): kotlin.Int declared in <root>'
        CONST Int type=kotlin.Int value=0
  FUN #2 name:testOverloadedCompareToCall visibility:public modality:FINAL <> (x:kotlin.Int, y:kotlin.Char) returnType:kotlin.Boolean 
    VALUE_PARAMETER #3 name:x index:0 type:kotlin.Int 
    VALUE_PARAMETER #4 name:y index:1 type:kotlin.Char 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#2 public final fun testOverloadedCompareToCall (x: kotlin.Int, y: kotlin.Char): kotlin.Boolean declared in <root>'
        ERROR_CALL 'Comparison of arguments with different types: kotlin/Int, kotlin/Char' type=kotlin.Boolean
  FUN #5 name:testOverloadedCompareToCallWithSmartCast visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #6 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #7 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#5 public final fun testOverloadedCompareToCallWithSmartCast (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
                  GET_VAR '#6 x: kotlin.Any declared in <root>.testOverloadedCompareToCallWithSmartCast' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Char
                  GET_VAR '#7 y: kotlin.Any declared in <root>.testOverloadedCompareToCallWithSmartCast' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: ERROR_CALL 'Comparison of arguments with unsupported type: kotlin/Any' type=kotlin.Boolean
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  FUN #8 name:testEqualsWithSmartCast visibility:public modality:FINAL <> (x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
    VALUE_PARAMETER #9 name:x index:0 type:kotlin.Any 
    VALUE_PARAMETER #10 name:y index:1 type:kotlin.Any 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#8 public final fun testEqualsWithSmartCast (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>'
        WHEN type=kotlin.Boolean origin=ANDAND
          BRANCH
            if: WHEN type=kotlin.Boolean origin=ANDAND
              BRANCH
                if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
                  GET_VAR '#9 x: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
                then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Char
                  GET_VAR '#10 y: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: CONST Boolean type=kotlin.Boolean value=false
            then: CALL '#11 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR '#9 x: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
              arg1: GET_VAR '#10 y: kotlin.Any declared in <root>.testEqualsWithSmartCast' type=kotlin.Any origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST Boolean type=kotlin.Boolean value=false
  CLASS #12 CLASS name:C modality:FINAL visibility:public superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER #13 INSTANCE_RECEIVER name:<this> type:<root>.C 
    CONSTRUCTOR #14 visibility:public <> () returnType:<root>.C [primary] 
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL '#15 public constructor <init> () [primary] declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL class='#12 class CLASS C declared in <root>'
    FUN #16 name:compareTo visibility:public modality:FINAL <> ($this:<root>.C, c:kotlin.Char) returnType:kotlin.Int 
      $this: VALUE_PARAMETER #17 name:<this> type:<root>.C 
      VALUE_PARAMETER #18 name:c index:0 type:kotlin.Char 
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='#16 public final fun compareTo (c: kotlin.Char): kotlin.Int declared in <root>.C'
          CONST Int type=kotlin.Int value=0
    FUN #19 name:testMemberExtensionCompareToCall visibility:public modality:FINAL <> ($this:<root>.C, x:kotlin.Int, y:kotlin.Char) returnType:kotlin.Boolean 
      $this: VALUE_PARAMETER #20 name:<this> type:<root>.C 
      VALUE_PARAMETER #21 name:x index:0 type:kotlin.Int 
      VALUE_PARAMETER #22 name:y index:1 type:kotlin.Char 
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='#19 public final fun testMemberExtensionCompareToCall (x: kotlin.Int, y: kotlin.Char): kotlin.Boolean declared in <root>.C'
          ERROR_CALL 'Comparison of arguments with different types: kotlin/Int, kotlin/Char' type=kotlin.Boolean
    FUN #23 name:testMemberExtensionCompareToCallWithSmartCast visibility:public modality:FINAL <> ($this:<root>.C, x:kotlin.Any, y:kotlin.Any) returnType:kotlin.Boolean 
      $this: VALUE_PARAMETER #24 name:<this> type:<root>.C 
      VALUE_PARAMETER #25 name:x index:0 type:kotlin.Any 
      VALUE_PARAMETER #26 name:y index:1 type:kotlin.Any 
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='#23 public final fun testMemberExtensionCompareToCallWithSmartCast (x: kotlin.Any, y: kotlin.Any): kotlin.Boolean declared in <root>.C'
          WHEN type=kotlin.Boolean origin=ANDAND
            BRANCH
              if: WHEN type=kotlin.Boolean origin=ANDAND
                BRANCH
                  if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Int
                    GET_VAR '#25 x: kotlin.Any declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=kotlin.Any origin=null
                  then: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Char
                    GET_VAR '#26 y: kotlin.Any declared in <root>.C.testMemberExtensionCompareToCallWithSmartCast' type=kotlin.Any origin=null
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Boolean type=kotlin.Boolean value=false
              then: ERROR_CALL 'Comparison of arguments with unsupported type: kotlin/Any' type=kotlin.Boolean
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Boolean type=kotlin.Boolean value=false
    FUN #27 FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean 
      overridden:
        #28 public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
      $this: VALUE_PARAMETER #29 name:<this> type:kotlin.Any 
      VALUE_PARAMETER #30 name:other index:0 type:kotlin.Any? 
    FUN #31 FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int 
      overridden:
        #32 public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER #33 name:<this> type:kotlin.Any 
    FUN #34 FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String 
      overridden:
        #35 public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER #36 name:<this> type:kotlin.Any 
