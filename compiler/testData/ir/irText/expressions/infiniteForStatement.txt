FILE fqName:<root> fileName:/infiniteForStatement.kt
  FUN name:testInfiniteFor visibility:public modality:FINAL <> () returnType:kotlin.Unit
    BLOCK_BODY
      WHILE label=null origin=FOR_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
  FUN name:testBreak visibility:public modality:FINAL <> () returnType:kotlin.Unit
    BLOCK_BODY
      VAR name:x type:kotlin.Int [var]
        CONST Int type=kotlin.Int value=0
      VAR name:y type:kotlin.Int [var]
        CONST Int type=kotlin.Int value=0
      WHILE label=null origin=FOR_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          WHEN type=kotlin.Unit origin=IF
            BRANCH
              if: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
                arg0: BLOCK type=kotlin.Int origin=PREFIX_INCR
                  SET_VAR 'var x: kotlin.Int [var] declared in <root>.testBreak' type=kotlin.Unit origin=PREFIX_INCR
                    CALL 'public final fun inc (): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PREFIX_INCR
                      $this: GET_VAR 'var x: kotlin.Int [var] declared in <root>.testBreak' type=kotlin.Int origin=PREFIX_INCR
                  GET_VAR 'var x: kotlin.Int [var] declared in <root>.testBreak' type=kotlin.Int origin=PREFIX_INCR
                arg1: CONST Int type=kotlin.Int value=3
              then: BREAK label=null loop.label=null
          TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
            BLOCK type=kotlin.Int origin=PREFIX_INCR
              SET_VAR 'var y: kotlin.Int [var] declared in <root>.testBreak' type=kotlin.Unit origin=PREFIX_INCR
                CALL 'public final fun inc (): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PREFIX_INCR
                  $this: GET_VAR 'var y: kotlin.Int [var] declared in <root>.testBreak' type=kotlin.Int origin=PREFIX_INCR
              GET_VAR 'var y: kotlin.Int [var] declared in <root>.testBreak' type=kotlin.Int origin=PREFIX_INCR
  FUN name:testBreakWithLabel visibility:public modality:FINAL <> () returnType:kotlin.Unit
    BLOCK_BODY
      VAR name:x type:kotlin.Int [var]
        CONST Int type=kotlin.Int value=0
      VAR name:y type:kotlin.Int [var]
        CONST Int type=kotlin.Int value=0
      WHILE label=L1 origin=FOR_LOOP
        condition: CONST Boolean type=kotlin.Boolean value=true
        body: BLOCK type=kotlin.Unit origin=null
          WHILE label=null origin=FOR_LOOP
            condition: CONST Boolean type=kotlin.Boolean value=true
            body: BLOCK type=kotlin.Unit origin=null
              WHEN type=kotlin.Unit origin=IF
                BRANCH
                  if: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
                    arg0: BLOCK type=kotlin.Int origin=PREFIX_INCR
                      SET_VAR 'var x: kotlin.Int [var] declared in <root>.testBreakWithLabel' type=kotlin.Unit origin=PREFIX_INCR
                        CALL 'public final fun inc (): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PREFIX_INCR
                          $this: GET_VAR 'var x: kotlin.Int [var] declared in <root>.testBreakWithLabel' type=kotlin.Int origin=PREFIX_INCR
                      GET_VAR 'var x: kotlin.Int [var] declared in <root>.testBreakWithLabel' type=kotlin.Int origin=PREFIX_INCR
                    arg1: CONST Int type=kotlin.Int value=3
                  then: BREAK label=null loop.label=null
              TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                BLOCK type=kotlin.Int origin=PREFIX_INCR
                  SET_VAR 'var y: kotlin.Int [var] declared in <root>.testBreakWithLabel' type=kotlin.Unit origin=PREFIX_INCR
                    CALL 'public final fun inc (): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PREFIX_INCR
                      $this: GET_VAR 'var y: kotlin.Int [var] declared in <root>.testBreakWithLabel' type=kotlin.Int origin=PREFIX_INCR
                  GET_VAR 'var y: kotlin.Int [var] declared in <root>.testBreakWithLabel' type=kotlin.Int origin=PREFIX_INCR
