FILE fqName:<root> fileName:/when.kt
  CLASS #0 OBJECT name:A modality:FINAL visibility:public superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER #1 INSTANCE_RECEIVER name:<this> type:<root>.A 
    CONSTRUCTOR #2 visibility:private <> () returnType:<root>.A [primary] 
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL '#3 public constructor <init> () [primary] declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL class='#0 class OBJECT A declared in <root>'
    FUN #4 FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean 
      overridden:
        #5 public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
      $this: VALUE_PARAMETER #6 name:<this> type:kotlin.Any 
      VALUE_PARAMETER #7 name:other index:0 type:kotlin.Any? 
    FUN #8 FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int 
      overridden:
        #9 public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER #10 name:<this> type:kotlin.Any 
    FUN #11 FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String 
      overridden:
        #12 public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER #13 name:<this> type:kotlin.Any 
  FUN #14 name:testWithSubject visibility:public modality:FINAL <> (x:kotlin.Any?) returnType:kotlin.String 
    VALUE_PARAMETER #15 name:x index:0 type:kotlin.Any? 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#14 public final fun testWithSubject (x: kotlin.Any?): kotlin.String declared in <root>'
        BLOCK type=kotlin.String origin=WHEN
          VAR #16 IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Any? [val] 
            GET_VAR '#15 x: kotlin.Any? declared in <root>.testWithSubject' type=kotlin.Any? origin=null
          WHEN type=kotlin.String origin=WHEN
            BRANCH
              if: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR '#16 val tmp0_subject: kotlin.Any? [val] declared in <root>.testWithSubject' type=kotlin.Any? origin=null
                arg1: CONST Null type=kotlin.Nothing? value=null
              then: CONST String type=kotlin.String value="null"
            BRANCH
              if: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR '#16 val tmp0_subject: kotlin.Any? [val] declared in <root>.testWithSubject' type=kotlin.Any? origin=null
                arg1: GET_OBJECT '#0 class OBJECT A declared in <root>' type=<root>.A
              then: CONST String type=kotlin.String value="A"
            BRANCH
              if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.String
                GET_VAR '#16 val tmp0_subject: kotlin.Any? [val] declared in <root>.testWithSubject' type=kotlin.Any? origin=null
              then: CONST String type=kotlin.String value="String"
            BRANCH
              if: CALL '#18 public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCL
                $this: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.Number
                  GET_VAR '#16 val tmp0_subject: kotlin.Any? [val] declared in <root>.testWithSubject' type=kotlin.Any? origin=null
              then: CONST String type=kotlin.String value="!Number"
            BRANCH
              if: CALL '#19 public final fun contains <T> (element: T of kotlin.collections.contains): kotlin.Boolean declared in kotlin.collections' type=kotlin.Boolean origin=IN
                <T>: kotlin.Number
                $receiver: CALL '#20 public final fun setOf <T> (): kotlin.collections.Set<T of kotlin.collections.setOf> [inline] declared in kotlin.collections' type=kotlin.collections.Set<kotlin.Nothing> origin=null
                  <T>: kotlin.Nothing
                element: TYPE_OP type=kotlin.Number origin=IMPLICIT_CAST typeOperand=kotlin.Number
                  GET_VAR '#16 val tmp0_subject: kotlin.Any? [val] declared in <root>.testWithSubject' type=kotlin.Any? origin=null
              then: CONST String type=kotlin.String value="nothingness?"
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST String type=kotlin.String value="something"
  FUN #21 name:test visibility:public modality:FINAL <> (x:kotlin.Any?) returnType:kotlin.String 
    VALUE_PARAMETER #22 name:x index:0 type:kotlin.Any? 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#21 public final fun test (x: kotlin.Any?): kotlin.String declared in <root>'
        WHEN type=kotlin.String origin=WHEN
          BRANCH
            if: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR '#22 x: kotlin.Any? declared in <root>.test' type=kotlin.Any? origin=null
              arg1: CONST Null type=kotlin.Nothing? value=null
            then: CONST String type=kotlin.String value="null"
          BRANCH
            if: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR '#22 x: kotlin.Any? declared in <root>.test' type=kotlin.Any? origin=null
              arg1: GET_OBJECT '#0 class OBJECT A declared in <root>' type=<root>.A
            then: CONST String type=kotlin.String value="A"
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.String
              GET_VAR '#22 x: kotlin.Any? declared in <root>.test' type=kotlin.Any? origin=null
            then: CONST String type=kotlin.String value="String"
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=kotlin.Number
              GET_VAR '#22 x: kotlin.Any? declared in <root>.test' type=kotlin.Any? origin=null
            then: CONST String type=kotlin.String value="!Number"
          BRANCH
            if: CALL '#19 public final fun contains <T> (element: T of kotlin.collections.contains): kotlin.Boolean declared in kotlin.collections' type=kotlin.Boolean origin=IN
              <T>: kotlin.Number
              $receiver: CALL '#20 public final fun setOf <T> (): kotlin.collections.Set<T of kotlin.collections.setOf> [inline] declared in kotlin.collections' type=kotlin.collections.Set<kotlin.Nothing> origin=null
                <T>: kotlin.Nothing
              element: TYPE_OP type=kotlin.Number origin=IMPLICIT_CAST typeOperand=kotlin.Number
                GET_VAR '#22 x: kotlin.Any? declared in <root>.test' type=kotlin.Any? origin=null
            then: CONST String type=kotlin.String value="nothingness?"
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST String type=kotlin.String value="something"
  FUN #23 name:testComma visibility:public modality:FINAL <> (x:kotlin.Int) returnType:kotlin.String 
    VALUE_PARAMETER #24 name:x index:0 type:kotlin.Int 
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='#23 public final fun testComma (x: kotlin.Int): kotlin.String declared in <root>'
        BLOCK type=kotlin.String origin=WHEN
          VAR #25 IR_TEMPORARY_VARIABLE name:tmp0_subject type:kotlin.Int [val] 
            GET_VAR '#24 x: kotlin.Int declared in <root>.testComma' type=kotlin.Int origin=null
          WHEN type=kotlin.String origin=WHEN
            BRANCH
              if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                BRANCH
                  if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                    BRANCH
                      if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                        BRANCH
                          if: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                            arg0: GET_VAR '#25 val tmp0_subject: kotlin.Int [val] declared in <root>.testComma' type=kotlin.Int origin=null
                            arg1: CONST Int type=kotlin.Int value=1
                          then: CONST Boolean type=kotlin.Boolean value=true
                        BRANCH
                          if: CONST Boolean type=kotlin.Boolean value=true
                          then: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                            arg0: GET_VAR '#25 val tmp0_subject: kotlin.Int [val] declared in <root>.testComma' type=kotlin.Int origin=null
                            arg1: CONST Int type=kotlin.Int value=2
                      then: CONST Boolean type=kotlin.Boolean value=true
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR '#25 val tmp0_subject: kotlin.Int [val] declared in <root>.testComma' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int value=3
                  then: CONST Boolean type=kotlin.Boolean value=true
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR '#25 val tmp0_subject: kotlin.Int [val] declared in <root>.testComma' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int value=4
              then: CONST String type=kotlin.String value="1234"
            BRANCH
              if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                BRANCH
                  if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                    BRANCH
                      if: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR '#25 val tmp0_subject: kotlin.Int [val] declared in <root>.testComma' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int value=5
                      then: CONST Boolean type=kotlin.Boolean value=true
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR '#25 val tmp0_subject: kotlin.Int [val] declared in <root>.testComma' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int value=6
                  then: CONST Boolean type=kotlin.Boolean value=true
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR '#25 val tmp0_subject: kotlin.Int [val] declared in <root>.testComma' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int value=7
              then: CONST String type=kotlin.String value="567"
            BRANCH
              if: WHEN type=kotlin.Boolean origin=WHEN_COMMA
                BRANCH
                  if: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR '#25 val tmp0_subject: kotlin.Int [val] declared in <root>.testComma' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int value=8
                  then: CONST Boolean type=kotlin.Boolean value=true
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CALL '#17 public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR '#25 val tmp0_subject: kotlin.Int [val] declared in <root>.testComma' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int value=9
              then: CONST String type=kotlin.String value="89"
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST String type=kotlin.String value="?"
