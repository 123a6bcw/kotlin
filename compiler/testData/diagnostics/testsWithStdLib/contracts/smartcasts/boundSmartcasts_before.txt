package

public fun myRequire(/*0*/ value: kotlin.Boolean): kotlin.Unit
    Returns(WILDCARD) -> value

public fun test_1(/*0*/ a: A?): kotlin.Unit
public fun test_2(/*0*/ a: A?): kotlin.Unit
public fun test_3(/*0*/ a: A): kotlin.Unit
public fun test_4(/*0*/ b: B?): kotlin.Unit

public final class A {
    public constructor A(/*0*/ nullableS: kotlin.String?, /*1*/ notNullS: kotlin.String)
    public final val notNullS: kotlin.String
    public final val nullableS: kotlin.String?
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class B {
    public constructor B(/*0*/ a: A?)
    public final val a: A?
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
